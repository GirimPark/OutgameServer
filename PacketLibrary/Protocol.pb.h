// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[38]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C2S_AcceptFriendRequest;
struct C2S_AcceptFriendRequestDefaultTypeInternal;
extern C2S_AcceptFriendRequestDefaultTypeInternal _C2S_AcceptFriendRequest_default_instance_;
class C2S_AddFriendRequest;
struct C2S_AddFriendRequestDefaultTypeInternal;
extern C2S_AddFriendRequestDefaultTypeInternal _C2S_AddFriendRequest_default_instance_;
class C2S_CancelAddFriendRequest;
struct C2S_CancelAddFriendRequestDefaultTypeInternal;
extern C2S_CancelAddFriendRequestDefaultTypeInternal _C2S_CancelAddFriendRequest_default_instance_;
class C2S_CreateRoomRequest;
struct C2S_CreateRoomRequestDefaultTypeInternal;
extern C2S_CreateRoomRequestDefaultTypeInternal _C2S_CreateRoomRequest_default_instance_;
class C2S_DelFriendRequest;
struct C2S_DelFriendRequestDefaultTypeInternal;
extern C2S_DelFriendRequestDefaultTypeInternal _C2S_DelFriendRequest_default_instance_;
class C2S_FindFriendRequest;
struct C2S_FindFriendRequestDefaultTypeInternal;
extern C2S_FindFriendRequestDefaultTypeInternal _C2S_FindFriendRequest_default_instance_;
class C2S_InviteFriendRequest;
struct C2S_InviteFriendRequestDefaultTypeInternal;
extern C2S_InviteFriendRequestDefaultTypeInternal _C2S_InviteFriendRequest_default_instance_;
class C2S_JoinRequest;
struct C2S_JoinRequestDefaultTypeInternal;
extern C2S_JoinRequestDefaultTypeInternal _C2S_JoinRequest_default_instance_;
class C2S_JoinRoomRequest;
struct C2S_JoinRoomRequestDefaultTypeInternal;
extern C2S_JoinRoomRequestDefaultTypeInternal _C2S_JoinRoomRequest_default_instance_;
class C2S_LoginRequest;
struct C2S_LoginRequestDefaultTypeInternal;
extern C2S_LoginRequestDefaultTypeInternal _C2S_LoginRequest_default_instance_;
class C2S_LogoutRequest;
struct C2S_LogoutRequestDefaultTypeInternal;
extern C2S_LogoutRequestDefaultTypeInternal _C2S_LogoutRequest_default_instance_;
class C2S_QuitRoomRequest;
struct C2S_QuitRoomRequestDefaultTypeInternal;
extern C2S_QuitRoomRequestDefaultTypeInternal _C2S_QuitRoomRequest_default_instance_;
class C2S_RefuseFriendRequest;
struct C2S_RefuseFriendRequestDefaultTypeInternal;
extern C2S_RefuseFriendRequestDefaultTypeInternal _C2S_RefuseFriendRequest_default_instance_;
class C2S_StartGameRequest;
struct C2S_StartGameRequestDefaultTypeInternal;
extern C2S_StartGameRequestDefaultTypeInternal _C2S_StartGameRequest_default_instance_;
class C2S_ValidationResponse;
struct C2S_ValidationResponseDefaultTypeInternal;
extern C2S_ValidationResponseDefaultTypeInternal _C2S_ValidationResponse_default_instance_;
class FriendInfo;
struct FriendInfoDefaultTypeInternal;
extern FriendInfoDefaultTypeInternal _FriendInfo_default_instance_;
class S2C_AcceptFriendResponse;
struct S2C_AcceptFriendResponseDefaultTypeInternal;
extern S2C_AcceptFriendResponseDefaultTypeInternal _S2C_AcceptFriendResponse_default_instance_;
class S2C_AddFriendResponse;
struct S2C_AddFriendResponseDefaultTypeInternal;
extern S2C_AddFriendResponseDefaultTypeInternal _S2C_AddFriendResponse_default_instance_;
class S2C_CancelAddFriendResponse;
struct S2C_CancelAddFriendResponseDefaultTypeInternal;
extern S2C_CancelAddFriendResponseDefaultTypeInternal _S2C_CancelAddFriendResponse_default_instance_;
class S2C_CreateRoomResponse;
struct S2C_CreateRoomResponseDefaultTypeInternal;
extern S2C_CreateRoomResponseDefaultTypeInternal _S2C_CreateRoomResponse_default_instance_;
class S2C_DelFriendResponse;
struct S2C_DelFriendResponseDefaultTypeInternal;
extern S2C_DelFriendResponseDefaultTypeInternal _S2C_DelFriendResponse_default_instance_;
class S2C_FindFriendResponse;
struct S2C_FindFriendResponseDefaultTypeInternal;
extern S2C_FindFriendResponseDefaultTypeInternal _S2C_FindFriendResponse_default_instance_;
class S2C_InviteFriendResponse;
struct S2C_InviteFriendResponseDefaultTypeInternal;
extern S2C_InviteFriendResponseDefaultTypeInternal _S2C_InviteFriendResponse_default_instance_;
class S2C_JoinResponse;
struct S2C_JoinResponseDefaultTypeInternal;
extern S2C_JoinResponseDefaultTypeInternal _S2C_JoinResponse_default_instance_;
class S2C_JoinRoomResponse;
struct S2C_JoinRoomResponseDefaultTypeInternal;
extern S2C_JoinRoomResponseDefaultTypeInternal _S2C_JoinRoomResponse_default_instance_;
class S2C_LoginResponse;
struct S2C_LoginResponseDefaultTypeInternal;
extern S2C_LoginResponseDefaultTypeInternal _S2C_LoginResponse_default_instance_;
class S2C_LogoutResponse;
struct S2C_LogoutResponseDefaultTypeInternal;
extern S2C_LogoutResponseDefaultTypeInternal _S2C_LogoutResponse_default_instance_;
class S2C_QuitRoomResponse;
struct S2C_QuitRoomResponseDefaultTypeInternal;
extern S2C_QuitRoomResponseDefaultTypeInternal _S2C_QuitRoomResponse_default_instance_;
class S2C_RefuseFriendResponse;
struct S2C_RefuseFriendResponseDefaultTypeInternal;
extern S2C_RefuseFriendResponseDefaultTypeInternal _S2C_RefuseFriendResponse_default_instance_;
class S2C_SessionExpiredNotification;
struct S2C_SessionExpiredNotificationDefaultTypeInternal;
extern S2C_SessionExpiredNotificationDefaultTypeInternal _S2C_SessionExpiredNotification_default_instance_;
class S2C_StartGameResponse;
struct S2C_StartGameResponseDefaultTypeInternal;
extern S2C_StartGameResponseDefaultTypeInternal _S2C_StartGameResponse_default_instance_;
class S2C_ValidationRequest;
struct S2C_ValidationRequestDefaultTypeInternal;
extern S2C_ValidationRequestDefaultTypeInternal _S2C_ValidationRequest_default_instance_;
class S2O_AcceptFriendNotification;
struct S2O_AcceptFriendNotificationDefaultTypeInternal;
extern S2O_AcceptFriendNotificationDefaultTypeInternal _S2O_AcceptFriendNotification_default_instance_;
class S2O_AddFriendNotification;
struct S2O_AddFriendNotificationDefaultTypeInternal;
extern S2O_AddFriendNotificationDefaultTypeInternal _S2O_AddFriendNotification_default_instance_;
class S2O_CancelAddFriendNotification;
struct S2O_CancelAddFriendNotificationDefaultTypeInternal;
extern S2O_CancelAddFriendNotificationDefaultTypeInternal _S2O_CancelAddFriendNotification_default_instance_;
class S2O_DelFriendNotification;
struct S2O_DelFriendNotificationDefaultTypeInternal;
extern S2O_DelFriendNotificationDefaultTypeInternal _S2O_DelFriendNotification_default_instance_;
class S2O_InviteFriendNotification;
struct S2O_InviteFriendNotificationDefaultTypeInternal;
extern S2O_InviteFriendNotificationDefaultTypeInternal _S2O_InviteFriendNotification_default_instance_;
class S2O_UpdateStateNotification;
struct S2O_UpdateStateNotificationDefaultTypeInternal;
extern S2O_UpdateStateNotificationDefaultTypeInternal _S2O_UpdateStateNotification_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C2S_AcceptFriendRequest* Arena::CreateMaybeMessage<::Protocol::C2S_AcceptFriendRequest>(Arena*);
template<> ::Protocol::C2S_AddFriendRequest* Arena::CreateMaybeMessage<::Protocol::C2S_AddFriendRequest>(Arena*);
template<> ::Protocol::C2S_CancelAddFriendRequest* Arena::CreateMaybeMessage<::Protocol::C2S_CancelAddFriendRequest>(Arena*);
template<> ::Protocol::C2S_CreateRoomRequest* Arena::CreateMaybeMessage<::Protocol::C2S_CreateRoomRequest>(Arena*);
template<> ::Protocol::C2S_DelFriendRequest* Arena::CreateMaybeMessage<::Protocol::C2S_DelFriendRequest>(Arena*);
template<> ::Protocol::C2S_FindFriendRequest* Arena::CreateMaybeMessage<::Protocol::C2S_FindFriendRequest>(Arena*);
template<> ::Protocol::C2S_InviteFriendRequest* Arena::CreateMaybeMessage<::Protocol::C2S_InviteFriendRequest>(Arena*);
template<> ::Protocol::C2S_JoinRequest* Arena::CreateMaybeMessage<::Protocol::C2S_JoinRequest>(Arena*);
template<> ::Protocol::C2S_JoinRoomRequest* Arena::CreateMaybeMessage<::Protocol::C2S_JoinRoomRequest>(Arena*);
template<> ::Protocol::C2S_LoginRequest* Arena::CreateMaybeMessage<::Protocol::C2S_LoginRequest>(Arena*);
template<> ::Protocol::C2S_LogoutRequest* Arena::CreateMaybeMessage<::Protocol::C2S_LogoutRequest>(Arena*);
template<> ::Protocol::C2S_QuitRoomRequest* Arena::CreateMaybeMessage<::Protocol::C2S_QuitRoomRequest>(Arena*);
template<> ::Protocol::C2S_RefuseFriendRequest* Arena::CreateMaybeMessage<::Protocol::C2S_RefuseFriendRequest>(Arena*);
template<> ::Protocol::C2S_StartGameRequest* Arena::CreateMaybeMessage<::Protocol::C2S_StartGameRequest>(Arena*);
template<> ::Protocol::C2S_ValidationResponse* Arena::CreateMaybeMessage<::Protocol::C2S_ValidationResponse>(Arena*);
template<> ::Protocol::FriendInfo* Arena::CreateMaybeMessage<::Protocol::FriendInfo>(Arena*);
template<> ::Protocol::S2C_AcceptFriendResponse* Arena::CreateMaybeMessage<::Protocol::S2C_AcceptFriendResponse>(Arena*);
template<> ::Protocol::S2C_AddFriendResponse* Arena::CreateMaybeMessage<::Protocol::S2C_AddFriendResponse>(Arena*);
template<> ::Protocol::S2C_CancelAddFriendResponse* Arena::CreateMaybeMessage<::Protocol::S2C_CancelAddFriendResponse>(Arena*);
template<> ::Protocol::S2C_CreateRoomResponse* Arena::CreateMaybeMessage<::Protocol::S2C_CreateRoomResponse>(Arena*);
template<> ::Protocol::S2C_DelFriendResponse* Arena::CreateMaybeMessage<::Protocol::S2C_DelFriendResponse>(Arena*);
template<> ::Protocol::S2C_FindFriendResponse* Arena::CreateMaybeMessage<::Protocol::S2C_FindFriendResponse>(Arena*);
template<> ::Protocol::S2C_InviteFriendResponse* Arena::CreateMaybeMessage<::Protocol::S2C_InviteFriendResponse>(Arena*);
template<> ::Protocol::S2C_JoinResponse* Arena::CreateMaybeMessage<::Protocol::S2C_JoinResponse>(Arena*);
template<> ::Protocol::S2C_JoinRoomResponse* Arena::CreateMaybeMessage<::Protocol::S2C_JoinRoomResponse>(Arena*);
template<> ::Protocol::S2C_LoginResponse* Arena::CreateMaybeMessage<::Protocol::S2C_LoginResponse>(Arena*);
template<> ::Protocol::S2C_LogoutResponse* Arena::CreateMaybeMessage<::Protocol::S2C_LogoutResponse>(Arena*);
template<> ::Protocol::S2C_QuitRoomResponse* Arena::CreateMaybeMessage<::Protocol::S2C_QuitRoomResponse>(Arena*);
template<> ::Protocol::S2C_RefuseFriendResponse* Arena::CreateMaybeMessage<::Protocol::S2C_RefuseFriendResponse>(Arena*);
template<> ::Protocol::S2C_SessionExpiredNotification* Arena::CreateMaybeMessage<::Protocol::S2C_SessionExpiredNotification>(Arena*);
template<> ::Protocol::S2C_StartGameResponse* Arena::CreateMaybeMessage<::Protocol::S2C_StartGameResponse>(Arena*);
template<> ::Protocol::S2C_ValidationRequest* Arena::CreateMaybeMessage<::Protocol::S2C_ValidationRequest>(Arena*);
template<> ::Protocol::S2O_AcceptFriendNotification* Arena::CreateMaybeMessage<::Protocol::S2O_AcceptFriendNotification>(Arena*);
template<> ::Protocol::S2O_AddFriendNotification* Arena::CreateMaybeMessage<::Protocol::S2O_AddFriendNotification>(Arena*);
template<> ::Protocol::S2O_CancelAddFriendNotification* Arena::CreateMaybeMessage<::Protocol::S2O_CancelAddFriendNotification>(Arena*);
template<> ::Protocol::S2O_DelFriendNotification* Arena::CreateMaybeMessage<::Protocol::S2O_DelFriendNotification>(Arena*);
template<> ::Protocol::S2O_InviteFriendNotification* Arena::CreateMaybeMessage<::Protocol::S2O_InviteFriendNotification>(Arena*);
template<> ::Protocol::S2O_UpdateStateNotification* Arena::CreateMaybeMessage<::Protocol::S2O_UpdateStateNotification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class FriendInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.FriendInfo) */ {
 public:
  inline FriendInfo() : FriendInfo(nullptr) {}
  ~FriendInfo() override;
  explicit constexpr FriendInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendInfo(const FriendInfo& from);
  FriendInfo(FriendInfo&& from) noexcept
    : FriendInfo() {
    *this = ::std::move(from);
  }

  inline FriendInfo& operator=(const FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendInfo& operator=(FriendInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendInfo* internal_default_instance() {
    return reinterpret_cast<const FriendInfo*>(
               &_FriendInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FriendInfo& a, FriendInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FriendInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.FriendInfo";
  }
  protected:
  explicit FriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int32 state = 2;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.FriendInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  int32_t state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_ValidationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S2C_ValidationRequest) */ {
 public:
  inline S2C_ValidationRequest() : S2C_ValidationRequest(nullptr) {}
  explicit constexpr S2C_ValidationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_ValidationRequest(const S2C_ValidationRequest& from);
  S2C_ValidationRequest(S2C_ValidationRequest&& from) noexcept
    : S2C_ValidationRequest() {
    *this = ::std::move(from);
  }

  inline S2C_ValidationRequest& operator=(const S2C_ValidationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_ValidationRequest& operator=(S2C_ValidationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_ValidationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_ValidationRequest* internal_default_instance() {
    return reinterpret_cast<const S2C_ValidationRequest*>(
               &_S2C_ValidationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S2C_ValidationRequest& a, S2C_ValidationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_ValidationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_ValidationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_ValidationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_ValidationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S2C_ValidationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S2C_ValidationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_ValidationRequest";
  }
  protected:
  explicit S2C_ValidationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S2C_ValidationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_ValidationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_ValidationResponse) */ {
 public:
  inline C2S_ValidationResponse() : C2S_ValidationResponse(nullptr) {}
  explicit constexpr C2S_ValidationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_ValidationResponse(const C2S_ValidationResponse& from);
  C2S_ValidationResponse(C2S_ValidationResponse&& from) noexcept
    : C2S_ValidationResponse() {
    *this = ::std::move(from);
  }

  inline C2S_ValidationResponse& operator=(const C2S_ValidationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_ValidationResponse& operator=(C2S_ValidationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_ValidationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_ValidationResponse* internal_default_instance() {
    return reinterpret_cast<const C2S_ValidationResponse*>(
               &_C2S_ValidationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C2S_ValidationResponse& a, C2S_ValidationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_ValidationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_ValidationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_ValidationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_ValidationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_ValidationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_ValidationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_ValidationResponse";
  }
  protected:
  explicit C2S_ValidationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_ValidationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_SessionExpiredNotification final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S2C_SessionExpiredNotification) */ {
 public:
  inline S2C_SessionExpiredNotification() : S2C_SessionExpiredNotification(nullptr) {}
  explicit constexpr S2C_SessionExpiredNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_SessionExpiredNotification(const S2C_SessionExpiredNotification& from);
  S2C_SessionExpiredNotification(S2C_SessionExpiredNotification&& from) noexcept
    : S2C_SessionExpiredNotification() {
    *this = ::std::move(from);
  }

  inline S2C_SessionExpiredNotification& operator=(const S2C_SessionExpiredNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_SessionExpiredNotification& operator=(S2C_SessionExpiredNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_SessionExpiredNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_SessionExpiredNotification* internal_default_instance() {
    return reinterpret_cast<const S2C_SessionExpiredNotification*>(
               &_S2C_SessionExpiredNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S2C_SessionExpiredNotification& a, S2C_SessionExpiredNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_SessionExpiredNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_SessionExpiredNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_SessionExpiredNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_SessionExpiredNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S2C_SessionExpiredNotification& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S2C_SessionExpiredNotification& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_SessionExpiredNotification";
  }
  protected:
  explicit S2C_SessionExpiredNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S2C_SessionExpiredNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_LoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_LoginRequest) */ {
 public:
  inline C2S_LoginRequest() : C2S_LoginRequest(nullptr) {}
  ~C2S_LoginRequest() override;
  explicit constexpr C2S_LoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LoginRequest(const C2S_LoginRequest& from);
  C2S_LoginRequest(C2S_LoginRequest&& from) noexcept
    : C2S_LoginRequest() {
    *this = ::std::move(from);
  }

  inline C2S_LoginRequest& operator=(const C2S_LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LoginRequest& operator=(C2S_LoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LoginRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_LoginRequest*>(
               &_C2S_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C2S_LoginRequest& a, C2S_LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_LoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_LoginRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_LoginRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LoginRequest";
  }
  protected:
  explicit C2S_LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_LoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LoginResponse) */ {
 public:
  inline S2C_LoginResponse() : S2C_LoginResponse(nullptr) {}
  ~S2C_LoginResponse() override;
  explicit constexpr S2C_LoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LoginResponse(const S2C_LoginResponse& from);
  S2C_LoginResponse(S2C_LoginResponse&& from) noexcept
    : S2C_LoginResponse() {
    *this = ::std::move(from);
  }

  inline S2C_LoginResponse& operator=(const S2C_LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LoginResponse& operator=(S2C_LoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LoginResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_LoginResponse*>(
               &_S2C_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S2C_LoginResponse& a, S2C_LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LoginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LoginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_LoginResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LoginResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LoginResponse";
  }
  protected:
  explicit S2C_LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendListFieldNumber = 2,
    kPendingListFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // repeated .Protocol.FriendInfo friendList = 2;
  int friendlist_size() const;
  private:
  int _internal_friendlist_size() const;
  public:
  void clear_friendlist();
  ::Protocol::FriendInfo* mutable_friendlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::FriendInfo >*
      mutable_friendlist();
  private:
  const ::Protocol::FriendInfo& _internal_friendlist(int index) const;
  ::Protocol::FriendInfo* _internal_add_friendlist();
  public:
  const ::Protocol::FriendInfo& friendlist(int index) const;
  ::Protocol::FriendInfo* add_friendlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::FriendInfo >&
      friendlist() const;

  // repeated .Protocol.FriendInfo pendingList = 3;
  int pendinglist_size() const;
  private:
  int _internal_pendinglist_size() const;
  public:
  void clear_pendinglist();
  ::Protocol::FriendInfo* mutable_pendinglist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::FriendInfo >*
      mutable_pendinglist();
  private:
  const ::Protocol::FriendInfo& _internal_pendinglist(int index) const;
  ::Protocol::FriendInfo* _internal_add_pendinglist();
  public:
  const ::Protocol::FriendInfo& pendinglist(int index) const;
  ::Protocol::FriendInfo* add_pendinglist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::FriendInfo >&
      pendinglist() const;

  // .google.protobuf.BoolValue success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& success() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_success();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_success();
  void set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_success() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_success();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::FriendInfo > friendlist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::FriendInfo > pendinglist_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_LogoutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_LogoutRequest) */ {
 public:
  inline C2S_LogoutRequest() : C2S_LogoutRequest(nullptr) {}
  explicit constexpr C2S_LogoutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LogoutRequest(const C2S_LogoutRequest& from);
  C2S_LogoutRequest(C2S_LogoutRequest&& from) noexcept
    : C2S_LogoutRequest() {
    *this = ::std::move(from);
  }

  inline C2S_LogoutRequest& operator=(const C2S_LogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LogoutRequest& operator=(C2S_LogoutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LogoutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LogoutRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_LogoutRequest*>(
               &_C2S_LogoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C2S_LogoutRequest& a, C2S_LogoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LogoutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LogoutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LogoutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LogoutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_LogoutRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_LogoutRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LogoutRequest";
  }
  protected:
  explicit C2S_LogoutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LogoutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_LogoutResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S2C_LogoutResponse) */ {
 public:
  inline S2C_LogoutResponse() : S2C_LogoutResponse(nullptr) {}
  explicit constexpr S2C_LogoutResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LogoutResponse(const S2C_LogoutResponse& from);
  S2C_LogoutResponse(S2C_LogoutResponse&& from) noexcept
    : S2C_LogoutResponse() {
    *this = ::std::move(from);
  }

  inline S2C_LogoutResponse& operator=(const S2C_LogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LogoutResponse& operator=(S2C_LogoutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LogoutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LogoutResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_LogoutResponse*>(
               &_S2C_LogoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S2C_LogoutResponse& a, S2C_LogoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LogoutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LogoutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LogoutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LogoutResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S2C_LogoutResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S2C_LogoutResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LogoutResponse";
  }
  protected:
  explicit S2C_LogoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LogoutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_JoinRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_JoinRequest) */ {
 public:
  inline C2S_JoinRequest() : C2S_JoinRequest(nullptr) {}
  ~C2S_JoinRequest() override;
  explicit constexpr C2S_JoinRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_JoinRequest(const C2S_JoinRequest& from);
  C2S_JoinRequest(C2S_JoinRequest&& from) noexcept
    : C2S_JoinRequest() {
    *this = ::std::move(from);
  }

  inline C2S_JoinRequest& operator=(const C2S_JoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_JoinRequest& operator=(C2S_JoinRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_JoinRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_JoinRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_JoinRequest*>(
               &_C2S_JoinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C2S_JoinRequest& a, C2S_JoinRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_JoinRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_JoinRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_JoinRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_JoinRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_JoinRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_JoinRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_JoinRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_JoinRequest";
  }
  protected:
  explicit C2S_JoinRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_JoinRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_JoinResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_JoinResponse) */ {
 public:
  inline S2C_JoinResponse() : S2C_JoinResponse(nullptr) {}
  ~S2C_JoinResponse() override;
  explicit constexpr S2C_JoinResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_JoinResponse(const S2C_JoinResponse& from);
  S2C_JoinResponse(S2C_JoinResponse&& from) noexcept
    : S2C_JoinResponse() {
    *this = ::std::move(from);
  }

  inline S2C_JoinResponse& operator=(const S2C_JoinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_JoinResponse& operator=(S2C_JoinResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_JoinResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_JoinResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_JoinResponse*>(
               &_S2C_JoinResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S2C_JoinResponse& a, S2C_JoinResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_JoinResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_JoinResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_JoinResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_JoinResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_JoinResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_JoinResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_JoinResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_JoinResponse";
  }
  protected:
  explicit S2C_JoinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // .google.protobuf.BoolValue success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& success() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_success();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_success();
  void set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_success() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_success();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_JoinResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_FindFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_FindFriendRequest) */ {
 public:
  inline C2S_FindFriendRequest() : C2S_FindFriendRequest(nullptr) {}
  ~C2S_FindFriendRequest() override;
  explicit constexpr C2S_FindFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_FindFriendRequest(const C2S_FindFriendRequest& from);
  C2S_FindFriendRequest(C2S_FindFriendRequest&& from) noexcept
    : C2S_FindFriendRequest() {
    *this = ::std::move(from);
  }

  inline C2S_FindFriendRequest& operator=(const C2S_FindFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_FindFriendRequest& operator=(C2S_FindFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_FindFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_FindFriendRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_FindFriendRequest*>(
               &_C2S_FindFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C2S_FindFriendRequest& a, C2S_FindFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_FindFriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_FindFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_FindFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_FindFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_FindFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_FindFriendRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_FindFriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_FindFriendRequest";
  }
  protected:
  explicit C2S_FindFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_FindFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_FindFriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_FindFriendResponse) */ {
 public:
  inline S2C_FindFriendResponse() : S2C_FindFriendResponse(nullptr) {}
  ~S2C_FindFriendResponse() override;
  explicit constexpr S2C_FindFriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_FindFriendResponse(const S2C_FindFriendResponse& from);
  S2C_FindFriendResponse(S2C_FindFriendResponse&& from) noexcept
    : S2C_FindFriendResponse() {
    *this = ::std::move(from);
  }

  inline S2C_FindFriendResponse& operator=(const S2C_FindFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_FindFriendResponse& operator=(S2C_FindFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_FindFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_FindFriendResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_FindFriendResponse*>(
               &_S2C_FindFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S2C_FindFriendResponse& a, S2C_FindFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_FindFriendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_FindFriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_FindFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_FindFriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_FindFriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_FindFriendResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_FindFriendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_FindFriendResponse";
  }
  protected:
  explicit S2C_FindFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExistFieldNumber = 1,
    kFriendInfoFieldNumber = 2,
    kRequestStateFieldNumber = 3,
  };
  // .google.protobuf.BoolValue exist = 1;
  bool has_exist() const;
  private:
  bool _internal_has_exist() const;
  public:
  void clear_exist();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& exist() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_exist();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_exist();
  void set_allocated_exist(::PROTOBUF_NAMESPACE_ID::BoolValue* exist);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_exist() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_exist();
  public:
  void unsafe_arena_set_allocated_exist(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* exist);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_exist();

  // .Protocol.FriendInfo friendInfo = 2;
  bool has_friendinfo() const;
  private:
  bool _internal_has_friendinfo() const;
  public:
  void clear_friendinfo();
  const ::Protocol::FriendInfo& friendinfo() const;
  PROTOBUF_NODISCARD ::Protocol::FriendInfo* release_friendinfo();
  ::Protocol::FriendInfo* mutable_friendinfo();
  void set_allocated_friendinfo(::Protocol::FriendInfo* friendinfo);
  private:
  const ::Protocol::FriendInfo& _internal_friendinfo() const;
  ::Protocol::FriendInfo* _internal_mutable_friendinfo();
  public:
  void unsafe_arena_set_allocated_friendinfo(
      ::Protocol::FriendInfo* friendinfo);
  ::Protocol::FriendInfo* unsafe_arena_release_friendinfo();

  // int32 requestState = 3;
  void clear_requeststate();
  int32_t requeststate() const;
  void set_requeststate(int32_t value);
  private:
  int32_t _internal_requeststate() const;
  void _internal_set_requeststate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_FindFriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* exist_;
  ::Protocol::FriendInfo* friendinfo_;
  int32_t requeststate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_AddFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_AddFriendRequest) */ {
 public:
  inline C2S_AddFriendRequest() : C2S_AddFriendRequest(nullptr) {}
  ~C2S_AddFriendRequest() override;
  explicit constexpr C2S_AddFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_AddFriendRequest(const C2S_AddFriendRequest& from);
  C2S_AddFriendRequest(C2S_AddFriendRequest&& from) noexcept
    : C2S_AddFriendRequest() {
    *this = ::std::move(from);
  }

  inline C2S_AddFriendRequest& operator=(const C2S_AddFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_AddFriendRequest& operator=(C2S_AddFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_AddFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_AddFriendRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_AddFriendRequest*>(
               &_C2S_AddFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(C2S_AddFriendRequest& a, C2S_AddFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_AddFriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_AddFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_AddFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_AddFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_AddFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_AddFriendRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_AddFriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_AddFriendRequest";
  }
  protected:
  explicit C2S_AddFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_AddFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_AddFriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AddFriendResponse) */ {
 public:
  inline S2C_AddFriendResponse() : S2C_AddFriendResponse(nullptr) {}
  ~S2C_AddFriendResponse() override;
  explicit constexpr S2C_AddFriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_AddFriendResponse(const S2C_AddFriendResponse& from);
  S2C_AddFriendResponse(S2C_AddFriendResponse&& from) noexcept
    : S2C_AddFriendResponse() {
    *this = ::std::move(from);
  }

  inline S2C_AddFriendResponse& operator=(const S2C_AddFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AddFriendResponse& operator=(S2C_AddFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_AddFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_AddFriendResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_AddFriendResponse*>(
               &_S2C_AddFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S2C_AddFriendResponse& a, S2C_AddFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AddFriendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_AddFriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_AddFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_AddFriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_AddFriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_AddFriendResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AddFriendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AddFriendResponse";
  }
  protected:
  explicit S2C_AddFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // .google.protobuf.BoolValue success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& success() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_success();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_success();
  void set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_success() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_success();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AddFriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2O_AddFriendNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2O_AddFriendNotification) */ {
 public:
  inline S2O_AddFriendNotification() : S2O_AddFriendNotification(nullptr) {}
  ~S2O_AddFriendNotification() override;
  explicit constexpr S2O_AddFriendNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2O_AddFriendNotification(const S2O_AddFriendNotification& from);
  S2O_AddFriendNotification(S2O_AddFriendNotification&& from) noexcept
    : S2O_AddFriendNotification() {
    *this = ::std::move(from);
  }

  inline S2O_AddFriendNotification& operator=(const S2O_AddFriendNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2O_AddFriendNotification& operator=(S2O_AddFriendNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2O_AddFriendNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2O_AddFriendNotification* internal_default_instance() {
    return reinterpret_cast<const S2O_AddFriendNotification*>(
               &_S2O_AddFriendNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(S2O_AddFriendNotification& a, S2O_AddFriendNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(S2O_AddFriendNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2O_AddFriendNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2O_AddFriendNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2O_AddFriendNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2O_AddFriendNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2O_AddFriendNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2O_AddFriendNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2O_AddFriendNotification";
  }
  protected:
  explicit S2O_AddFriendNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2O_AddFriendNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_CancelAddFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_CancelAddFriendRequest) */ {
 public:
  inline C2S_CancelAddFriendRequest() : C2S_CancelAddFriendRequest(nullptr) {}
  ~C2S_CancelAddFriendRequest() override;
  explicit constexpr C2S_CancelAddFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_CancelAddFriendRequest(const C2S_CancelAddFriendRequest& from);
  C2S_CancelAddFriendRequest(C2S_CancelAddFriendRequest&& from) noexcept
    : C2S_CancelAddFriendRequest() {
    *this = ::std::move(from);
  }

  inline C2S_CancelAddFriendRequest& operator=(const C2S_CancelAddFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_CancelAddFriendRequest& operator=(C2S_CancelAddFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_CancelAddFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_CancelAddFriendRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_CancelAddFriendRequest*>(
               &_C2S_CancelAddFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(C2S_CancelAddFriendRequest& a, C2S_CancelAddFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_CancelAddFriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_CancelAddFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_CancelAddFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_CancelAddFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_CancelAddFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_CancelAddFriendRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_CancelAddFriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_CancelAddFriendRequest";
  }
  protected:
  explicit C2S_CancelAddFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_CancelAddFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_CancelAddFriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_CancelAddFriendResponse) */ {
 public:
  inline S2C_CancelAddFriendResponse() : S2C_CancelAddFriendResponse(nullptr) {}
  ~S2C_CancelAddFriendResponse() override;
  explicit constexpr S2C_CancelAddFriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_CancelAddFriendResponse(const S2C_CancelAddFriendResponse& from);
  S2C_CancelAddFriendResponse(S2C_CancelAddFriendResponse&& from) noexcept
    : S2C_CancelAddFriendResponse() {
    *this = ::std::move(from);
  }

  inline S2C_CancelAddFriendResponse& operator=(const S2C_CancelAddFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_CancelAddFriendResponse& operator=(S2C_CancelAddFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_CancelAddFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_CancelAddFriendResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_CancelAddFriendResponse*>(
               &_S2C_CancelAddFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(S2C_CancelAddFriendResponse& a, S2C_CancelAddFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_CancelAddFriendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_CancelAddFriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_CancelAddFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_CancelAddFriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_CancelAddFriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_CancelAddFriendResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_CancelAddFriendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_CancelAddFriendResponse";
  }
  protected:
  explicit S2C_CancelAddFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // .google.protobuf.BoolValue success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& success() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_success();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_success();
  void set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_success() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_success();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_CancelAddFriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2O_CancelAddFriendNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2O_CancelAddFriendNotification) */ {
 public:
  inline S2O_CancelAddFriendNotification() : S2O_CancelAddFriendNotification(nullptr) {}
  ~S2O_CancelAddFriendNotification() override;
  explicit constexpr S2O_CancelAddFriendNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2O_CancelAddFriendNotification(const S2O_CancelAddFriendNotification& from);
  S2O_CancelAddFriendNotification(S2O_CancelAddFriendNotification&& from) noexcept
    : S2O_CancelAddFriendNotification() {
    *this = ::std::move(from);
  }

  inline S2O_CancelAddFriendNotification& operator=(const S2O_CancelAddFriendNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2O_CancelAddFriendNotification& operator=(S2O_CancelAddFriendNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2O_CancelAddFriendNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2O_CancelAddFriendNotification* internal_default_instance() {
    return reinterpret_cast<const S2O_CancelAddFriendNotification*>(
               &_S2O_CancelAddFriendNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S2O_CancelAddFriendNotification& a, S2O_CancelAddFriendNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(S2O_CancelAddFriendNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2O_CancelAddFriendNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2O_CancelAddFriendNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2O_CancelAddFriendNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2O_CancelAddFriendNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2O_CancelAddFriendNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2O_CancelAddFriendNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2O_CancelAddFriendNotification";
  }
  protected:
  explicit S2O_CancelAddFriendNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2O_CancelAddFriendNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_AcceptFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_AcceptFriendRequest) */ {
 public:
  inline C2S_AcceptFriendRequest() : C2S_AcceptFriendRequest(nullptr) {}
  ~C2S_AcceptFriendRequest() override;
  explicit constexpr C2S_AcceptFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_AcceptFriendRequest(const C2S_AcceptFriendRequest& from);
  C2S_AcceptFriendRequest(C2S_AcceptFriendRequest&& from) noexcept
    : C2S_AcceptFriendRequest() {
    *this = ::std::move(from);
  }

  inline C2S_AcceptFriendRequest& operator=(const C2S_AcceptFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_AcceptFriendRequest& operator=(C2S_AcceptFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_AcceptFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_AcceptFriendRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_AcceptFriendRequest*>(
               &_C2S_AcceptFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(C2S_AcceptFriendRequest& a, C2S_AcceptFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_AcceptFriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_AcceptFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_AcceptFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_AcceptFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_AcceptFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_AcceptFriendRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_AcceptFriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_AcceptFriendRequest";
  }
  protected:
  explicit C2S_AcceptFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptedUsernameFieldNumber = 1,
  };
  // string acceptedUsername = 1;
  void clear_acceptedusername();
  const std::string& acceptedusername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_acceptedusername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_acceptedusername();
  PROTOBUF_NODISCARD std::string* release_acceptedusername();
  void set_allocated_acceptedusername(std::string* acceptedusername);
  private:
  const std::string& _internal_acceptedusername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acceptedusername(const std::string& value);
  std::string* _internal_mutable_acceptedusername();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_AcceptFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acceptedusername_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_AcceptFriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AcceptFriendResponse) */ {
 public:
  inline S2C_AcceptFriendResponse() : S2C_AcceptFriendResponse(nullptr) {}
  ~S2C_AcceptFriendResponse() override;
  explicit constexpr S2C_AcceptFriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_AcceptFriendResponse(const S2C_AcceptFriendResponse& from);
  S2C_AcceptFriendResponse(S2C_AcceptFriendResponse&& from) noexcept
    : S2C_AcceptFriendResponse() {
    *this = ::std::move(from);
  }

  inline S2C_AcceptFriendResponse& operator=(const S2C_AcceptFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AcceptFriendResponse& operator=(S2C_AcceptFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_AcceptFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_AcceptFriendResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_AcceptFriendResponse*>(
               &_S2C_AcceptFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S2C_AcceptFriendResponse& a, S2C_AcceptFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AcceptFriendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_AcceptFriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_AcceptFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_AcceptFriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_AcceptFriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_AcceptFriendResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AcceptFriendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AcceptFriendResponse";
  }
  protected:
  explicit S2C_AcceptFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kNewFriendInfoFieldNumber = 2,
  };
  // .google.protobuf.BoolValue success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& success() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_success();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_success();
  void set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_success() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_success();

  // .Protocol.FriendInfo newFriendInfo = 2;
  bool has_newfriendinfo() const;
  private:
  bool _internal_has_newfriendinfo() const;
  public:
  void clear_newfriendinfo();
  const ::Protocol::FriendInfo& newfriendinfo() const;
  PROTOBUF_NODISCARD ::Protocol::FriendInfo* release_newfriendinfo();
  ::Protocol::FriendInfo* mutable_newfriendinfo();
  void set_allocated_newfriendinfo(::Protocol::FriendInfo* newfriendinfo);
  private:
  const ::Protocol::FriendInfo& _internal_newfriendinfo() const;
  ::Protocol::FriendInfo* _internal_mutable_newfriendinfo();
  public:
  void unsafe_arena_set_allocated_newfriendinfo(
      ::Protocol::FriendInfo* newfriendinfo);
  ::Protocol::FriendInfo* unsafe_arena_release_newfriendinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AcceptFriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* success_;
  ::Protocol::FriendInfo* newfriendinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2O_AcceptFriendNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2O_AcceptFriendNotification) */ {
 public:
  inline S2O_AcceptFriendNotification() : S2O_AcceptFriendNotification(nullptr) {}
  ~S2O_AcceptFriendNotification() override;
  explicit constexpr S2O_AcceptFriendNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2O_AcceptFriendNotification(const S2O_AcceptFriendNotification& from);
  S2O_AcceptFriendNotification(S2O_AcceptFriendNotification&& from) noexcept
    : S2O_AcceptFriendNotification() {
    *this = ::std::move(from);
  }

  inline S2O_AcceptFriendNotification& operator=(const S2O_AcceptFriendNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2O_AcceptFriendNotification& operator=(S2O_AcceptFriendNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2O_AcceptFriendNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2O_AcceptFriendNotification* internal_default_instance() {
    return reinterpret_cast<const S2O_AcceptFriendNotification*>(
               &_S2O_AcceptFriendNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(S2O_AcceptFriendNotification& a, S2O_AcceptFriendNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(S2O_AcceptFriendNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2O_AcceptFriendNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2O_AcceptFriendNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2O_AcceptFriendNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2O_AcceptFriendNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2O_AcceptFriendNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2O_AcceptFriendNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2O_AcceptFriendNotification";
  }
  protected:
  explicit S2O_AcceptFriendNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewFriendInfoFieldNumber = 1,
  };
  // .Protocol.FriendInfo newFriendInfo = 1;
  bool has_newfriendinfo() const;
  private:
  bool _internal_has_newfriendinfo() const;
  public:
  void clear_newfriendinfo();
  const ::Protocol::FriendInfo& newfriendinfo() const;
  PROTOBUF_NODISCARD ::Protocol::FriendInfo* release_newfriendinfo();
  ::Protocol::FriendInfo* mutable_newfriendinfo();
  void set_allocated_newfriendinfo(::Protocol::FriendInfo* newfriendinfo);
  private:
  const ::Protocol::FriendInfo& _internal_newfriendinfo() const;
  ::Protocol::FriendInfo* _internal_mutable_newfriendinfo();
  public:
  void unsafe_arena_set_allocated_newfriendinfo(
      ::Protocol::FriendInfo* newfriendinfo);
  ::Protocol::FriendInfo* unsafe_arena_release_newfriendinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S2O_AcceptFriendNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::FriendInfo* newfriendinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_RefuseFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_RefuseFriendRequest) */ {
 public:
  inline C2S_RefuseFriendRequest() : C2S_RefuseFriendRequest(nullptr) {}
  ~C2S_RefuseFriendRequest() override;
  explicit constexpr C2S_RefuseFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_RefuseFriendRequest(const C2S_RefuseFriendRequest& from);
  C2S_RefuseFriendRequest(C2S_RefuseFriendRequest&& from) noexcept
    : C2S_RefuseFriendRequest() {
    *this = ::std::move(from);
  }

  inline C2S_RefuseFriendRequest& operator=(const C2S_RefuseFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_RefuseFriendRequest& operator=(C2S_RefuseFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_RefuseFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_RefuseFriendRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_RefuseFriendRequest*>(
               &_C2S_RefuseFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(C2S_RefuseFriendRequest& a, C2S_RefuseFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_RefuseFriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_RefuseFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_RefuseFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_RefuseFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_RefuseFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_RefuseFriendRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_RefuseFriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_RefuseFriendRequest";
  }
  protected:
  explicit C2S_RefuseFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefusedUsernameFieldNumber = 1,
  };
  // string refusedUsername = 1;
  void clear_refusedusername();
  const std::string& refusedusername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_refusedusername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_refusedusername();
  PROTOBUF_NODISCARD std::string* release_refusedusername();
  void set_allocated_refusedusername(std::string* refusedusername);
  private:
  const std::string& _internal_refusedusername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_refusedusername(const std::string& value);
  std::string* _internal_mutable_refusedusername();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_RefuseFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refusedusername_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_RefuseFriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_RefuseFriendResponse) */ {
 public:
  inline S2C_RefuseFriendResponse() : S2C_RefuseFriendResponse(nullptr) {}
  ~S2C_RefuseFriendResponse() override;
  explicit constexpr S2C_RefuseFriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_RefuseFriendResponse(const S2C_RefuseFriendResponse& from);
  S2C_RefuseFriendResponse(S2C_RefuseFriendResponse&& from) noexcept
    : S2C_RefuseFriendResponse() {
    *this = ::std::move(from);
  }

  inline S2C_RefuseFriendResponse& operator=(const S2C_RefuseFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_RefuseFriendResponse& operator=(S2C_RefuseFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_RefuseFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_RefuseFriendResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_RefuseFriendResponse*>(
               &_S2C_RefuseFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(S2C_RefuseFriendResponse& a, S2C_RefuseFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_RefuseFriendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_RefuseFriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_RefuseFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_RefuseFriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_RefuseFriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_RefuseFriendResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_RefuseFriendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_RefuseFriendResponse";
  }
  protected:
  explicit S2C_RefuseFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefusedUsernameFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string refusedUsername = 2;
  void clear_refusedusername();
  const std::string& refusedusername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_refusedusername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_refusedusername();
  PROTOBUF_NODISCARD std::string* release_refusedusername();
  void set_allocated_refusedusername(std::string* refusedusername);
  private:
  const std::string& _internal_refusedusername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_refusedusername(const std::string& value);
  std::string* _internal_mutable_refusedusername();
  public:

  // .google.protobuf.BoolValue success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& success() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_success();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_success();
  void set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_success() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_success();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_RefuseFriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refusedusername_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_DelFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_DelFriendRequest) */ {
 public:
  inline C2S_DelFriendRequest() : C2S_DelFriendRequest(nullptr) {}
  ~C2S_DelFriendRequest() override;
  explicit constexpr C2S_DelFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_DelFriendRequest(const C2S_DelFriendRequest& from);
  C2S_DelFriendRequest(C2S_DelFriendRequest&& from) noexcept
    : C2S_DelFriendRequest() {
    *this = ::std::move(from);
  }

  inline C2S_DelFriendRequest& operator=(const C2S_DelFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_DelFriendRequest& operator=(C2S_DelFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_DelFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_DelFriendRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_DelFriendRequest*>(
               &_C2S_DelFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(C2S_DelFriendRequest& a, C2S_DelFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_DelFriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_DelFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_DelFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_DelFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_DelFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_DelFriendRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_DelFriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_DelFriendRequest";
  }
  protected:
  explicit C2S_DelFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendNameFieldNumber = 1,
  };
  // string friendName = 1;
  void clear_friendname();
  const std::string& friendname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_friendname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_friendname();
  PROTOBUF_NODISCARD std::string* release_friendname();
  void set_allocated_friendname(std::string* friendname);
  private:
  const std::string& _internal_friendname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friendname(const std::string& value);
  std::string* _internal_mutable_friendname();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_DelFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friendname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_DelFriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_DelFriendResponse) */ {
 public:
  inline S2C_DelFriendResponse() : S2C_DelFriendResponse(nullptr) {}
  ~S2C_DelFriendResponse() override;
  explicit constexpr S2C_DelFriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_DelFriendResponse(const S2C_DelFriendResponse& from);
  S2C_DelFriendResponse(S2C_DelFriendResponse&& from) noexcept
    : S2C_DelFriendResponse() {
    *this = ::std::move(from);
  }

  inline S2C_DelFriendResponse& operator=(const S2C_DelFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_DelFriendResponse& operator=(S2C_DelFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_DelFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_DelFriendResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_DelFriendResponse*>(
               &_S2C_DelFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(S2C_DelFriendResponse& a, S2C_DelFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_DelFriendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_DelFriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_DelFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_DelFriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_DelFriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_DelFriendResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_DelFriendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_DelFriendResponse";
  }
  protected:
  explicit S2C_DelFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelFriendNameFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string delFriendName = 2;
  void clear_delfriendname();
  const std::string& delfriendname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delfriendname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delfriendname();
  PROTOBUF_NODISCARD std::string* release_delfriendname();
  void set_allocated_delfriendname(std::string* delfriendname);
  private:
  const std::string& _internal_delfriendname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delfriendname(const std::string& value);
  std::string* _internal_mutable_delfriendname();
  public:

  // .google.protobuf.BoolValue success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& success() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_success();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_success();
  void set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_success() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_success();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_DelFriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delfriendname_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2O_DelFriendNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2O_DelFriendNotification) */ {
 public:
  inline S2O_DelFriendNotification() : S2O_DelFriendNotification(nullptr) {}
  ~S2O_DelFriendNotification() override;
  explicit constexpr S2O_DelFriendNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2O_DelFriendNotification(const S2O_DelFriendNotification& from);
  S2O_DelFriendNotification(S2O_DelFriendNotification&& from) noexcept
    : S2O_DelFriendNotification() {
    *this = ::std::move(from);
  }

  inline S2O_DelFriendNotification& operator=(const S2O_DelFriendNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2O_DelFriendNotification& operator=(S2O_DelFriendNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2O_DelFriendNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2O_DelFriendNotification* internal_default_instance() {
    return reinterpret_cast<const S2O_DelFriendNotification*>(
               &_S2O_DelFriendNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(S2O_DelFriendNotification& a, S2O_DelFriendNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(S2O_DelFriendNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2O_DelFriendNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2O_DelFriendNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2O_DelFriendNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2O_DelFriendNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2O_DelFriendNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2O_DelFriendNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2O_DelFriendNotification";
  }
  protected:
  explicit S2O_DelFriendNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelFriendNameFieldNumber = 1,
  };
  // string delFriendName = 1;
  void clear_delfriendname();
  const std::string& delfriendname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delfriendname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delfriendname();
  PROTOBUF_NODISCARD std::string* release_delfriendname();
  void set_allocated_delfriendname(std::string* delfriendname);
  private:
  const std::string& _internal_delfriendname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delfriendname(const std::string& value);
  std::string* _internal_mutable_delfriendname();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2O_DelFriendNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delfriendname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2O_UpdateStateNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2O_UpdateStateNotification) */ {
 public:
  inline S2O_UpdateStateNotification() : S2O_UpdateStateNotification(nullptr) {}
  ~S2O_UpdateStateNotification() override;
  explicit constexpr S2O_UpdateStateNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2O_UpdateStateNotification(const S2O_UpdateStateNotification& from);
  S2O_UpdateStateNotification(S2O_UpdateStateNotification&& from) noexcept
    : S2O_UpdateStateNotification() {
    *this = ::std::move(from);
  }

  inline S2O_UpdateStateNotification& operator=(const S2O_UpdateStateNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2O_UpdateStateNotification& operator=(S2O_UpdateStateNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2O_UpdateStateNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2O_UpdateStateNotification* internal_default_instance() {
    return reinterpret_cast<const S2O_UpdateStateNotification*>(
               &_S2O_UpdateStateNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(S2O_UpdateStateNotification& a, S2O_UpdateStateNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(S2O_UpdateStateNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2O_UpdateStateNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2O_UpdateStateNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2O_UpdateStateNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2O_UpdateStateNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2O_UpdateStateNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2O_UpdateStateNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2O_UpdateStateNotification";
  }
  protected:
  explicit S2O_UpdateStateNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendInfoFieldNumber = 1,
  };
  // .Protocol.FriendInfo friendInfo = 1;
  bool has_friendinfo() const;
  private:
  bool _internal_has_friendinfo() const;
  public:
  void clear_friendinfo();
  const ::Protocol::FriendInfo& friendinfo() const;
  PROTOBUF_NODISCARD ::Protocol::FriendInfo* release_friendinfo();
  ::Protocol::FriendInfo* mutable_friendinfo();
  void set_allocated_friendinfo(::Protocol::FriendInfo* friendinfo);
  private:
  const ::Protocol::FriendInfo& _internal_friendinfo() const;
  ::Protocol::FriendInfo* _internal_mutable_friendinfo();
  public:
  void unsafe_arena_set_allocated_friendinfo(
      ::Protocol::FriendInfo* friendinfo);
  ::Protocol::FriendInfo* unsafe_arena_release_friendinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S2O_UpdateStateNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::FriendInfo* friendinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_CreateRoomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_CreateRoomRequest) */ {
 public:
  inline C2S_CreateRoomRequest() : C2S_CreateRoomRequest(nullptr) {}
  explicit constexpr C2S_CreateRoomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_CreateRoomRequest(const C2S_CreateRoomRequest& from);
  C2S_CreateRoomRequest(C2S_CreateRoomRequest&& from) noexcept
    : C2S_CreateRoomRequest() {
    *this = ::std::move(from);
  }

  inline C2S_CreateRoomRequest& operator=(const C2S_CreateRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_CreateRoomRequest& operator=(C2S_CreateRoomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_CreateRoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_CreateRoomRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_CreateRoomRequest*>(
               &_C2S_CreateRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(C2S_CreateRoomRequest& a, C2S_CreateRoomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_CreateRoomRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_CreateRoomRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_CreateRoomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_CreateRoomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_CreateRoomRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_CreateRoomRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_CreateRoomRequest";
  }
  protected:
  explicit C2S_CreateRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_CreateRoomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_CreateRoomResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_CreateRoomResponse) */ {
 public:
  inline S2C_CreateRoomResponse() : S2C_CreateRoomResponse(nullptr) {}
  ~S2C_CreateRoomResponse() override;
  explicit constexpr S2C_CreateRoomResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_CreateRoomResponse(const S2C_CreateRoomResponse& from);
  S2C_CreateRoomResponse(S2C_CreateRoomResponse&& from) noexcept
    : S2C_CreateRoomResponse() {
    *this = ::std::move(from);
  }

  inline S2C_CreateRoomResponse& operator=(const S2C_CreateRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_CreateRoomResponse& operator=(S2C_CreateRoomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_CreateRoomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_CreateRoomResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_CreateRoomResponse*>(
               &_S2C_CreateRoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(S2C_CreateRoomResponse& a, S2C_CreateRoomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_CreateRoomResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_CreateRoomResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_CreateRoomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_CreateRoomResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_CreateRoomResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_CreateRoomResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_CreateRoomResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_CreateRoomResponse";
  }
  protected:
  explicit S2C_CreateRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomCodeFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string roomCode = 2;
  void clear_roomcode();
  const std::string& roomcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomcode();
  PROTOBUF_NODISCARD std::string* release_roomcode();
  void set_allocated_roomcode(std::string* roomcode);
  private:
  const std::string& _internal_roomcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomcode(const std::string& value);
  std::string* _internal_mutable_roomcode();
  public:

  // .google.protobuf.BoolValue success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& success() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_success();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_success();
  void set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_success() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_success();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_CreateRoomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomcode_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_JoinRoomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_JoinRoomRequest) */ {
 public:
  inline C2S_JoinRoomRequest() : C2S_JoinRoomRequest(nullptr) {}
  ~C2S_JoinRoomRequest() override;
  explicit constexpr C2S_JoinRoomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_JoinRoomRequest(const C2S_JoinRoomRequest& from);
  C2S_JoinRoomRequest(C2S_JoinRoomRequest&& from) noexcept
    : C2S_JoinRoomRequest() {
    *this = ::std::move(from);
  }

  inline C2S_JoinRoomRequest& operator=(const C2S_JoinRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_JoinRoomRequest& operator=(C2S_JoinRoomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_JoinRoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_JoinRoomRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_JoinRoomRequest*>(
               &_C2S_JoinRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(C2S_JoinRoomRequest& a, C2S_JoinRoomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_JoinRoomRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_JoinRoomRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_JoinRoomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_JoinRoomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_JoinRoomRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_JoinRoomRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_JoinRoomRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_JoinRoomRequest";
  }
  protected:
  explicit C2S_JoinRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomCodeFieldNumber = 1,
  };
  // string roomCode = 1;
  void clear_roomcode();
  const std::string& roomcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomcode();
  PROTOBUF_NODISCARD std::string* release_roomcode();
  void set_allocated_roomcode(std::string* roomcode);
  private:
  const std::string& _internal_roomcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomcode(const std::string& value);
  std::string* _internal_mutable_roomcode();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_JoinRoomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_JoinRoomResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_JoinRoomResponse) */ {
 public:
  inline S2C_JoinRoomResponse() : S2C_JoinRoomResponse(nullptr) {}
  ~S2C_JoinRoomResponse() override;
  explicit constexpr S2C_JoinRoomResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_JoinRoomResponse(const S2C_JoinRoomResponse& from);
  S2C_JoinRoomResponse(S2C_JoinRoomResponse&& from) noexcept
    : S2C_JoinRoomResponse() {
    *this = ::std::move(from);
  }

  inline S2C_JoinRoomResponse& operator=(const S2C_JoinRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_JoinRoomResponse& operator=(S2C_JoinRoomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_JoinRoomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_JoinRoomResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_JoinRoomResponse*>(
               &_S2C_JoinRoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(S2C_JoinRoomResponse& a, S2C_JoinRoomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_JoinRoomResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_JoinRoomResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_JoinRoomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_JoinRoomResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_JoinRoomResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_JoinRoomResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_JoinRoomResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_JoinRoomResponse";
  }
  protected:
  explicit S2C_JoinRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 2,
    kResultCodeFieldNumber = 1,
  };
  // string ipAddress = 2;
  void clear_ipaddress();
  const std::string& ipaddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipaddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipaddress();
  PROTOBUF_NODISCARD std::string* release_ipaddress();
  void set_allocated_ipaddress(std::string* ipaddress);
  private:
  const std::string& _internal_ipaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipaddress(const std::string& value);
  std::string* _internal_mutable_ipaddress();
  public:

  // int32 resultCode = 1;
  void clear_resultcode();
  int32_t resultcode() const;
  void set_resultcode(int32_t value);
  private:
  int32_t _internal_resultcode() const;
  void _internal_set_resultcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_JoinRoomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipaddress_;
  int32_t resultcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_QuitRoomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_QuitRoomRequest) */ {
 public:
  inline C2S_QuitRoomRequest() : C2S_QuitRoomRequest(nullptr) {}
  explicit constexpr C2S_QuitRoomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_QuitRoomRequest(const C2S_QuitRoomRequest& from);
  C2S_QuitRoomRequest(C2S_QuitRoomRequest&& from) noexcept
    : C2S_QuitRoomRequest() {
    *this = ::std::move(from);
  }

  inline C2S_QuitRoomRequest& operator=(const C2S_QuitRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_QuitRoomRequest& operator=(C2S_QuitRoomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_QuitRoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_QuitRoomRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_QuitRoomRequest*>(
               &_C2S_QuitRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(C2S_QuitRoomRequest& a, C2S_QuitRoomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_QuitRoomRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_QuitRoomRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_QuitRoomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_QuitRoomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_QuitRoomRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_QuitRoomRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_QuitRoomRequest";
  }
  protected:
  explicit C2S_QuitRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_QuitRoomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_QuitRoomResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_QuitRoomResponse) */ {
 public:
  inline S2C_QuitRoomResponse() : S2C_QuitRoomResponse(nullptr) {}
  ~S2C_QuitRoomResponse() override;
  explicit constexpr S2C_QuitRoomResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_QuitRoomResponse(const S2C_QuitRoomResponse& from);
  S2C_QuitRoomResponse(S2C_QuitRoomResponse&& from) noexcept
    : S2C_QuitRoomResponse() {
    *this = ::std::move(from);
  }

  inline S2C_QuitRoomResponse& operator=(const S2C_QuitRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_QuitRoomResponse& operator=(S2C_QuitRoomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_QuitRoomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_QuitRoomResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_QuitRoomResponse*>(
               &_S2C_QuitRoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(S2C_QuitRoomResponse& a, S2C_QuitRoomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_QuitRoomResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_QuitRoomResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_QuitRoomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_QuitRoomResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_QuitRoomResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_QuitRoomResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_QuitRoomResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_QuitRoomResponse";
  }
  protected:
  explicit S2C_QuitRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // .google.protobuf.BoolValue success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& success() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_success();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_success();
  void set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_success() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_success();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_QuitRoomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_InviteFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_InviteFriendRequest) */ {
 public:
  inline C2S_InviteFriendRequest() : C2S_InviteFriendRequest(nullptr) {}
  ~C2S_InviteFriendRequest() override;
  explicit constexpr C2S_InviteFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_InviteFriendRequest(const C2S_InviteFriendRequest& from);
  C2S_InviteFriendRequest(C2S_InviteFriendRequest&& from) noexcept
    : C2S_InviteFriendRequest() {
    *this = ::std::move(from);
  }

  inline C2S_InviteFriendRequest& operator=(const C2S_InviteFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_InviteFriendRequest& operator=(C2S_InviteFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_InviteFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_InviteFriendRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_InviteFriendRequest*>(
               &_C2S_InviteFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(C2S_InviteFriendRequest& a, C2S_InviteFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_InviteFriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_InviteFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_InviteFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_InviteFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_InviteFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_InviteFriendRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_InviteFriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_InviteFriendRequest";
  }
  protected:
  explicit C2S_InviteFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_InviteFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_InviteFriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_InviteFriendResponse) */ {
 public:
  inline S2C_InviteFriendResponse() : S2C_InviteFriendResponse(nullptr) {}
  ~S2C_InviteFriendResponse() override;
  explicit constexpr S2C_InviteFriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_InviteFriendResponse(const S2C_InviteFriendResponse& from);
  S2C_InviteFriendResponse(S2C_InviteFriendResponse&& from) noexcept
    : S2C_InviteFriendResponse() {
    *this = ::std::move(from);
  }

  inline S2C_InviteFriendResponse& operator=(const S2C_InviteFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_InviteFriendResponse& operator=(S2C_InviteFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_InviteFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_InviteFriendResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_InviteFriendResponse*>(
               &_S2C_InviteFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(S2C_InviteFriendResponse& a, S2C_InviteFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_InviteFriendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_InviteFriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_InviteFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_InviteFriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_InviteFriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_InviteFriendResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_InviteFriendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_InviteFriendResponse";
  }
  protected:
  explicit S2C_InviteFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitedUserNameFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string invitedUserName = 2;
  void clear_invitedusername();
  const std::string& invitedusername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invitedusername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invitedusername();
  PROTOBUF_NODISCARD std::string* release_invitedusername();
  void set_allocated_invitedusername(std::string* invitedusername);
  private:
  const std::string& _internal_invitedusername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invitedusername(const std::string& value);
  std::string* _internal_mutable_invitedusername();
  public:

  // .google.protobuf.BoolValue success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& success() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_success();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_success();
  void set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_success() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_success();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_InviteFriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitedusername_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2O_InviteFriendNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2O_InviteFriendNotification) */ {
 public:
  inline S2O_InviteFriendNotification() : S2O_InviteFriendNotification(nullptr) {}
  ~S2O_InviteFriendNotification() override;
  explicit constexpr S2O_InviteFriendNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2O_InviteFriendNotification(const S2O_InviteFriendNotification& from);
  S2O_InviteFriendNotification(S2O_InviteFriendNotification&& from) noexcept
    : S2O_InviteFriendNotification() {
    *this = ::std::move(from);
  }

  inline S2O_InviteFriendNotification& operator=(const S2O_InviteFriendNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2O_InviteFriendNotification& operator=(S2O_InviteFriendNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2O_InviteFriendNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2O_InviteFriendNotification* internal_default_instance() {
    return reinterpret_cast<const S2O_InviteFriendNotification*>(
               &_S2O_InviteFriendNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(S2O_InviteFriendNotification& a, S2O_InviteFriendNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(S2O_InviteFriendNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2O_InviteFriendNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2O_InviteFriendNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2O_InviteFriendNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2O_InviteFriendNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2O_InviteFriendNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2O_InviteFriendNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2O_InviteFriendNotification";
  }
  protected:
  explicit S2O_InviteFriendNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kRoomCodeFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string roomCode = 2;
  void clear_roomcode();
  const std::string& roomcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomcode();
  PROTOBUF_NODISCARD std::string* release_roomcode();
  void set_allocated_roomcode(std::string* roomcode);
  private:
  const std::string& _internal_roomcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomcode(const std::string& value);
  std::string* _internal_mutable_roomcode();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2O_InviteFriendNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_StartGameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_StartGameRequest) */ {
 public:
  inline C2S_StartGameRequest() : C2S_StartGameRequest(nullptr) {}
  explicit constexpr C2S_StartGameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_StartGameRequest(const C2S_StartGameRequest& from);
  C2S_StartGameRequest(C2S_StartGameRequest&& from) noexcept
    : C2S_StartGameRequest() {
    *this = ::std::move(from);
  }

  inline C2S_StartGameRequest& operator=(const C2S_StartGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_StartGameRequest& operator=(C2S_StartGameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_StartGameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_StartGameRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_StartGameRequest*>(
               &_C2S_StartGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(C2S_StartGameRequest& a, C2S_StartGameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_StartGameRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_StartGameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_StartGameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_StartGameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_StartGameRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_StartGameRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_StartGameRequest";
  }
  protected:
  explicit C2S_StartGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_StartGameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_StartGameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_StartGameResponse) */ {
 public:
  inline S2C_StartGameResponse() : S2C_StartGameResponse(nullptr) {}
  ~S2C_StartGameResponse() override;
  explicit constexpr S2C_StartGameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_StartGameResponse(const S2C_StartGameResponse& from);
  S2C_StartGameResponse(S2C_StartGameResponse&& from) noexcept
    : S2C_StartGameResponse() {
    *this = ::std::move(from);
  }

  inline S2C_StartGameResponse& operator=(const S2C_StartGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_StartGameResponse& operator=(S2C_StartGameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_StartGameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_StartGameResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_StartGameResponse*>(
               &_S2C_StartGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(S2C_StartGameResponse& a, S2C_StartGameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_StartGameResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_StartGameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_StartGameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_StartGameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_StartGameResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_StartGameResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_StartGameResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_StartGameResponse";
  }
  protected:
  explicit S2C_StartGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // .google.protobuf.BoolValue success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& success() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_success();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_success();
  void set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_success() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_success();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_StartGameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FriendInfo

// string username = 1;
inline void FriendInfo::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& FriendInfo::username() const {
  // @@protoc_insertion_point(field_get:Protocol.FriendInfo.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendInfo::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.FriendInfo.username)
}
inline std::string* FriendInfo::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Protocol.FriendInfo.username)
  return _s;
}
inline const std::string& FriendInfo::_internal_username() const {
  return username_.Get();
}
inline void FriendInfo::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FriendInfo::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FriendInfo::release_username() {
  // @@protoc_insertion_point(field_release:Protocol.FriendInfo.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FriendInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.FriendInfo.username)
}

// int32 state = 2;
inline void FriendInfo::clear_state() {
  state_ = 0;
}
inline int32_t FriendInfo::_internal_state() const {
  return state_;
}
inline int32_t FriendInfo::state() const {
  // @@protoc_insertion_point(field_get:Protocol.FriendInfo.state)
  return _internal_state();
}
inline void FriendInfo::_internal_set_state(int32_t value) {
  
  state_ = value;
}
inline void FriendInfo::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.FriendInfo.state)
}

// -------------------------------------------------------------------

// S2C_ValidationRequest

// -------------------------------------------------------------------

// C2S_ValidationResponse

// -------------------------------------------------------------------

// S2C_SessionExpiredNotification

// -------------------------------------------------------------------

// C2S_LoginRequest

// string username = 1;
inline void C2S_LoginRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& C2S_LoginRequest::username() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_LoginRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_LoginRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_LoginRequest.username)
}
inline std::string* C2S_LoginRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_LoginRequest.username)
  return _s;
}
inline const std::string& C2S_LoginRequest::_internal_username() const {
  return username_.Get();
}
inline void C2S_LoginRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_LoginRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_LoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_LoginRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2S_LoginRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_LoginRequest.username)
}

// string password = 2;
inline void C2S_LoginRequest::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& C2S_LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_LoginRequest.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_LoginRequest::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_LoginRequest.password)
}
inline std::string* C2S_LoginRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_LoginRequest.password)
  return _s;
}
inline const std::string& C2S_LoginRequest::_internal_password() const {
  return password_.Get();
}
inline void C2S_LoginRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_LoginRequest::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_LoginRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2S_LoginRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_LoginRequest.password)
}

// -------------------------------------------------------------------

// S2C_LoginResponse

// .google.protobuf.BoolValue success = 1;
inline bool S2C_LoginResponse::_internal_has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline bool S2C_LoginResponse::has_success() const {
  return _internal_has_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_LoginResponse::_internal_success() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = success_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_LoginResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoginResponse.success)
  return _internal_success();
}
inline void S2C_LoginResponse::unsafe_arena_set_allocated_success(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_LoginResponse.success)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_LoginResponse::release_success() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_LoginResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_LoginResponse.success)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_LoginResponse::_internal_mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    success_ = p;
  }
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_LoginResponse::mutable_success() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LoginResponse.success)
  return _msg;
}
inline void S2C_LoginResponse::set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success));
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_LoginResponse.success)
}

// repeated .Protocol.FriendInfo friendList = 2;
inline int S2C_LoginResponse::_internal_friendlist_size() const {
  return friendlist_.size();
}
inline int S2C_LoginResponse::friendlist_size() const {
  return _internal_friendlist_size();
}
inline void S2C_LoginResponse::clear_friendlist() {
  friendlist_.Clear();
}
inline ::Protocol::FriendInfo* S2C_LoginResponse::mutable_friendlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LoginResponse.friendList)
  return friendlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::FriendInfo >*
S2C_LoginResponse::mutable_friendlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoginResponse.friendList)
  return &friendlist_;
}
inline const ::Protocol::FriendInfo& S2C_LoginResponse::_internal_friendlist(int index) const {
  return friendlist_.Get(index);
}
inline const ::Protocol::FriendInfo& S2C_LoginResponse::friendlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoginResponse.friendList)
  return _internal_friendlist(index);
}
inline ::Protocol::FriendInfo* S2C_LoginResponse::_internal_add_friendlist() {
  return friendlist_.Add();
}
inline ::Protocol::FriendInfo* S2C_LoginResponse::add_friendlist() {
  ::Protocol::FriendInfo* _add = _internal_add_friendlist();
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoginResponse.friendList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::FriendInfo >&
S2C_LoginResponse::friendlist() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoginResponse.friendList)
  return friendlist_;
}

// repeated .Protocol.FriendInfo pendingList = 3;
inline int S2C_LoginResponse::_internal_pendinglist_size() const {
  return pendinglist_.size();
}
inline int S2C_LoginResponse::pendinglist_size() const {
  return _internal_pendinglist_size();
}
inline void S2C_LoginResponse::clear_pendinglist() {
  pendinglist_.Clear();
}
inline ::Protocol::FriendInfo* S2C_LoginResponse::mutable_pendinglist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LoginResponse.pendingList)
  return pendinglist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::FriendInfo >*
S2C_LoginResponse::mutable_pendinglist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoginResponse.pendingList)
  return &pendinglist_;
}
inline const ::Protocol::FriendInfo& S2C_LoginResponse::_internal_pendinglist(int index) const {
  return pendinglist_.Get(index);
}
inline const ::Protocol::FriendInfo& S2C_LoginResponse::pendinglist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoginResponse.pendingList)
  return _internal_pendinglist(index);
}
inline ::Protocol::FriendInfo* S2C_LoginResponse::_internal_add_pendinglist() {
  return pendinglist_.Add();
}
inline ::Protocol::FriendInfo* S2C_LoginResponse::add_pendinglist() {
  ::Protocol::FriendInfo* _add = _internal_add_pendinglist();
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoginResponse.pendingList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::FriendInfo >&
S2C_LoginResponse::pendinglist() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoginResponse.pendingList)
  return pendinglist_;
}

// -------------------------------------------------------------------

// C2S_LogoutRequest

// -------------------------------------------------------------------

// S2C_LogoutResponse

// -------------------------------------------------------------------

// C2S_JoinRequest

// string username = 1;
inline void C2S_JoinRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& C2S_JoinRequest::username() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_JoinRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_JoinRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_JoinRequest.username)
}
inline std::string* C2S_JoinRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_JoinRequest.username)
  return _s;
}
inline const std::string& C2S_JoinRequest::_internal_username() const {
  return username_.Get();
}
inline void C2S_JoinRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_JoinRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_JoinRequest::release_username() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_JoinRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2S_JoinRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_JoinRequest.username)
}

// string password = 2;
inline void C2S_JoinRequest::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& C2S_JoinRequest::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_JoinRequest.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_JoinRequest::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_JoinRequest.password)
}
inline std::string* C2S_JoinRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_JoinRequest.password)
  return _s;
}
inline const std::string& C2S_JoinRequest::_internal_password() const {
  return password_.Get();
}
inline void C2S_JoinRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_JoinRequest::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_JoinRequest::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_JoinRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2S_JoinRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_JoinRequest.password)
}

// -------------------------------------------------------------------

// S2C_JoinResponse

// .google.protobuf.BoolValue success = 1;
inline bool S2C_JoinResponse::_internal_has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline bool S2C_JoinResponse::has_success() const {
  return _internal_has_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_JoinResponse::_internal_success() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = success_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_JoinResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_JoinResponse.success)
  return _internal_success();
}
inline void S2C_JoinResponse::unsafe_arena_set_allocated_success(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_JoinResponse.success)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_JoinResponse::release_success() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_JoinResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_JoinResponse.success)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_JoinResponse::_internal_mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    success_ = p;
  }
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_JoinResponse::mutable_success() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_JoinResponse.success)
  return _msg;
}
inline void S2C_JoinResponse::set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success));
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_JoinResponse.success)
}

// -------------------------------------------------------------------

// C2S_FindFriendRequest

// string username = 1;
inline void C2S_FindFriendRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& C2S_FindFriendRequest::username() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_FindFriendRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_FindFriendRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_FindFriendRequest.username)
}
inline std::string* C2S_FindFriendRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_FindFriendRequest.username)
  return _s;
}
inline const std::string& C2S_FindFriendRequest::_internal_username() const {
  return username_.Get();
}
inline void C2S_FindFriendRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_FindFriendRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_FindFriendRequest::release_username() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_FindFriendRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2S_FindFriendRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_FindFriendRequest.username)
}

// -------------------------------------------------------------------

// S2C_FindFriendResponse

// .google.protobuf.BoolValue exist = 1;
inline bool S2C_FindFriendResponse::_internal_has_exist() const {
  return this != internal_default_instance() && exist_ != nullptr;
}
inline bool S2C_FindFriendResponse::has_exist() const {
  return _internal_has_exist();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_FindFriendResponse::_internal_exist() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = exist_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_FindFriendResponse::exist() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_FindFriendResponse.exist)
  return _internal_exist();
}
inline void S2C_FindFriendResponse::unsafe_arena_set_allocated_exist(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* exist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exist_);
  }
  exist_ = exist;
  if (exist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_FindFriendResponse.exist)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_FindFriendResponse::release_exist() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = exist_;
  exist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_FindFriendResponse::unsafe_arena_release_exist() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_FindFriendResponse.exist)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = exist_;
  exist_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_FindFriendResponse::_internal_mutable_exist() {
  
  if (exist_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    exist_ = p;
  }
  return exist_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_FindFriendResponse::mutable_exist() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_exist();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_FindFriendResponse.exist)
  return _msg;
}
inline void S2C_FindFriendResponse::set_allocated_exist(::PROTOBUF_NAMESPACE_ID::BoolValue* exist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(exist_);
  }
  if (exist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exist));
    if (message_arena != submessage_arena) {
      exist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exist, submessage_arena);
    }
    
  } else {
    
  }
  exist_ = exist;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_FindFriendResponse.exist)
}

// .Protocol.FriendInfo friendInfo = 2;
inline bool S2C_FindFriendResponse::_internal_has_friendinfo() const {
  return this != internal_default_instance() && friendinfo_ != nullptr;
}
inline bool S2C_FindFriendResponse::has_friendinfo() const {
  return _internal_has_friendinfo();
}
inline void S2C_FindFriendResponse::clear_friendinfo() {
  if (GetArenaForAllocation() == nullptr && friendinfo_ != nullptr) {
    delete friendinfo_;
  }
  friendinfo_ = nullptr;
}
inline const ::Protocol::FriendInfo& S2C_FindFriendResponse::_internal_friendinfo() const {
  const ::Protocol::FriendInfo* p = friendinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::FriendInfo&>(
      ::Protocol::_FriendInfo_default_instance_);
}
inline const ::Protocol::FriendInfo& S2C_FindFriendResponse::friendinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_FindFriendResponse.friendInfo)
  return _internal_friendinfo();
}
inline void S2C_FindFriendResponse::unsafe_arena_set_allocated_friendinfo(
    ::Protocol::FriendInfo* friendinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friendinfo_);
  }
  friendinfo_ = friendinfo;
  if (friendinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_FindFriendResponse.friendInfo)
}
inline ::Protocol::FriendInfo* S2C_FindFriendResponse::release_friendinfo() {
  
  ::Protocol::FriendInfo* temp = friendinfo_;
  friendinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::FriendInfo* S2C_FindFriendResponse::unsafe_arena_release_friendinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_FindFriendResponse.friendInfo)
  
  ::Protocol::FriendInfo* temp = friendinfo_;
  friendinfo_ = nullptr;
  return temp;
}
inline ::Protocol::FriendInfo* S2C_FindFriendResponse::_internal_mutable_friendinfo() {
  
  if (friendinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::FriendInfo>(GetArenaForAllocation());
    friendinfo_ = p;
  }
  return friendinfo_;
}
inline ::Protocol::FriendInfo* S2C_FindFriendResponse::mutable_friendinfo() {
  ::Protocol::FriendInfo* _msg = _internal_mutable_friendinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_FindFriendResponse.friendInfo)
  return _msg;
}
inline void S2C_FindFriendResponse::set_allocated_friendinfo(::Protocol::FriendInfo* friendinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete friendinfo_;
  }
  if (friendinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::FriendInfo>::GetOwningArena(friendinfo);
    if (message_arena != submessage_arena) {
      friendinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendinfo, submessage_arena);
    }
    
  } else {
    
  }
  friendinfo_ = friendinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_FindFriendResponse.friendInfo)
}

// int32 requestState = 3;
inline void S2C_FindFriendResponse::clear_requeststate() {
  requeststate_ = 0;
}
inline int32_t S2C_FindFriendResponse::_internal_requeststate() const {
  return requeststate_;
}
inline int32_t S2C_FindFriendResponse::requeststate() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_FindFriendResponse.requestState)
  return _internal_requeststate();
}
inline void S2C_FindFriendResponse::_internal_set_requeststate(int32_t value) {
  
  requeststate_ = value;
}
inline void S2C_FindFriendResponse::set_requeststate(int32_t value) {
  _internal_set_requeststate(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_FindFriendResponse.requestState)
}

// -------------------------------------------------------------------

// C2S_AddFriendRequest

// string username = 1;
inline void C2S_AddFriendRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& C2S_AddFriendRequest::username() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_AddFriendRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_AddFriendRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_AddFriendRequest.username)
}
inline std::string* C2S_AddFriendRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_AddFriendRequest.username)
  return _s;
}
inline const std::string& C2S_AddFriendRequest::_internal_username() const {
  return username_.Get();
}
inline void C2S_AddFriendRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_AddFriendRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_AddFriendRequest::release_username() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_AddFriendRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2S_AddFriendRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_AddFriendRequest.username)
}

// -------------------------------------------------------------------

// S2C_AddFriendResponse

// .google.protobuf.BoolValue success = 1;
inline bool S2C_AddFriendResponse::_internal_has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline bool S2C_AddFriendResponse::has_success() const {
  return _internal_has_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_AddFriendResponse::_internal_success() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = success_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_AddFriendResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AddFriendResponse.success)
  return _internal_success();
}
inline void S2C_AddFriendResponse::unsafe_arena_set_allocated_success(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AddFriendResponse.success)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_AddFriendResponse::release_success() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_AddFriendResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AddFriendResponse.success)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_AddFriendResponse::_internal_mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    success_ = p;
  }
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_AddFriendResponse::mutable_success() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AddFriendResponse.success)
  return _msg;
}
inline void S2C_AddFriendResponse::set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success));
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AddFriendResponse.success)
}

// -------------------------------------------------------------------

// S2O_AddFriendNotification

// string username = 1;
inline void S2O_AddFriendNotification::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& S2O_AddFriendNotification::username() const {
  // @@protoc_insertion_point(field_get:Protocol.S2O_AddFriendNotification.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2O_AddFriendNotification::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2O_AddFriendNotification.username)
}
inline std::string* S2O_AddFriendNotification::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Protocol.S2O_AddFriendNotification.username)
  return _s;
}
inline const std::string& S2O_AddFriendNotification::_internal_username() const {
  return username_.Get();
}
inline void S2O_AddFriendNotification::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S2O_AddFriendNotification::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S2O_AddFriendNotification::release_username() {
  // @@protoc_insertion_point(field_release:Protocol.S2O_AddFriendNotification.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S2O_AddFriendNotification::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2O_AddFriendNotification.username)
}

// -------------------------------------------------------------------

// C2S_CancelAddFriendRequest

// string username = 1;
inline void C2S_CancelAddFriendRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& C2S_CancelAddFriendRequest::username() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_CancelAddFriendRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_CancelAddFriendRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_CancelAddFriendRequest.username)
}
inline std::string* C2S_CancelAddFriendRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_CancelAddFriendRequest.username)
  return _s;
}
inline const std::string& C2S_CancelAddFriendRequest::_internal_username() const {
  return username_.Get();
}
inline void C2S_CancelAddFriendRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_CancelAddFriendRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_CancelAddFriendRequest::release_username() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_CancelAddFriendRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2S_CancelAddFriendRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_CancelAddFriendRequest.username)
}

// -------------------------------------------------------------------

// S2C_CancelAddFriendResponse

// .google.protobuf.BoolValue success = 1;
inline bool S2C_CancelAddFriendResponse::_internal_has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline bool S2C_CancelAddFriendResponse::has_success() const {
  return _internal_has_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_CancelAddFriendResponse::_internal_success() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = success_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_CancelAddFriendResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_CancelAddFriendResponse.success)
  return _internal_success();
}
inline void S2C_CancelAddFriendResponse::unsafe_arena_set_allocated_success(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_CancelAddFriendResponse.success)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_CancelAddFriendResponse::release_success() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_CancelAddFriendResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_CancelAddFriendResponse.success)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_CancelAddFriendResponse::_internal_mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    success_ = p;
  }
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_CancelAddFriendResponse::mutable_success() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_CancelAddFriendResponse.success)
  return _msg;
}
inline void S2C_CancelAddFriendResponse::set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success));
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_CancelAddFriendResponse.success)
}

// -------------------------------------------------------------------

// S2O_CancelAddFriendNotification

// string username = 1;
inline void S2O_CancelAddFriendNotification::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& S2O_CancelAddFriendNotification::username() const {
  // @@protoc_insertion_point(field_get:Protocol.S2O_CancelAddFriendNotification.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2O_CancelAddFriendNotification::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2O_CancelAddFriendNotification.username)
}
inline std::string* S2O_CancelAddFriendNotification::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Protocol.S2O_CancelAddFriendNotification.username)
  return _s;
}
inline const std::string& S2O_CancelAddFriendNotification::_internal_username() const {
  return username_.Get();
}
inline void S2O_CancelAddFriendNotification::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S2O_CancelAddFriendNotification::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S2O_CancelAddFriendNotification::release_username() {
  // @@protoc_insertion_point(field_release:Protocol.S2O_CancelAddFriendNotification.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S2O_CancelAddFriendNotification::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2O_CancelAddFriendNotification.username)
}

// -------------------------------------------------------------------

// C2S_AcceptFriendRequest

// string acceptedUsername = 1;
inline void C2S_AcceptFriendRequest::clear_acceptedusername() {
  acceptedusername_.ClearToEmpty();
}
inline const std::string& C2S_AcceptFriendRequest::acceptedusername() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_AcceptFriendRequest.acceptedUsername)
  return _internal_acceptedusername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_AcceptFriendRequest::set_acceptedusername(ArgT0&& arg0, ArgT... args) {
 
 acceptedusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_AcceptFriendRequest.acceptedUsername)
}
inline std::string* C2S_AcceptFriendRequest::mutable_acceptedusername() {
  std::string* _s = _internal_mutable_acceptedusername();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_AcceptFriendRequest.acceptedUsername)
  return _s;
}
inline const std::string& C2S_AcceptFriendRequest::_internal_acceptedusername() const {
  return acceptedusername_.Get();
}
inline void C2S_AcceptFriendRequest::_internal_set_acceptedusername(const std::string& value) {
  
  acceptedusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_AcceptFriendRequest::_internal_mutable_acceptedusername() {
  
  return acceptedusername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_AcceptFriendRequest::release_acceptedusername() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_AcceptFriendRequest.acceptedUsername)
  return acceptedusername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2S_AcceptFriendRequest::set_allocated_acceptedusername(std::string* acceptedusername) {
  if (acceptedusername != nullptr) {
    
  } else {
    
  }
  acceptedusername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acceptedusername,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (acceptedusername_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    acceptedusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_AcceptFriendRequest.acceptedUsername)
}

// -------------------------------------------------------------------

// S2C_AcceptFriendResponse

// .google.protobuf.BoolValue success = 1;
inline bool S2C_AcceptFriendResponse::_internal_has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline bool S2C_AcceptFriendResponse::has_success() const {
  return _internal_has_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_AcceptFriendResponse::_internal_success() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = success_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_AcceptFriendResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AcceptFriendResponse.success)
  return _internal_success();
}
inline void S2C_AcceptFriendResponse::unsafe_arena_set_allocated_success(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AcceptFriendResponse.success)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_AcceptFriendResponse::release_success() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_AcceptFriendResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AcceptFriendResponse.success)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_AcceptFriendResponse::_internal_mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    success_ = p;
  }
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_AcceptFriendResponse::mutable_success() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AcceptFriendResponse.success)
  return _msg;
}
inline void S2C_AcceptFriendResponse::set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success));
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AcceptFriendResponse.success)
}

// .Protocol.FriendInfo newFriendInfo = 2;
inline bool S2C_AcceptFriendResponse::_internal_has_newfriendinfo() const {
  return this != internal_default_instance() && newfriendinfo_ != nullptr;
}
inline bool S2C_AcceptFriendResponse::has_newfriendinfo() const {
  return _internal_has_newfriendinfo();
}
inline void S2C_AcceptFriendResponse::clear_newfriendinfo() {
  if (GetArenaForAllocation() == nullptr && newfriendinfo_ != nullptr) {
    delete newfriendinfo_;
  }
  newfriendinfo_ = nullptr;
}
inline const ::Protocol::FriendInfo& S2C_AcceptFriendResponse::_internal_newfriendinfo() const {
  const ::Protocol::FriendInfo* p = newfriendinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::FriendInfo&>(
      ::Protocol::_FriendInfo_default_instance_);
}
inline const ::Protocol::FriendInfo& S2C_AcceptFriendResponse::newfriendinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AcceptFriendResponse.newFriendInfo)
  return _internal_newfriendinfo();
}
inline void S2C_AcceptFriendResponse::unsafe_arena_set_allocated_newfriendinfo(
    ::Protocol::FriendInfo* newfriendinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newfriendinfo_);
  }
  newfriendinfo_ = newfriendinfo;
  if (newfriendinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AcceptFriendResponse.newFriendInfo)
}
inline ::Protocol::FriendInfo* S2C_AcceptFriendResponse::release_newfriendinfo() {
  
  ::Protocol::FriendInfo* temp = newfriendinfo_;
  newfriendinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::FriendInfo* S2C_AcceptFriendResponse::unsafe_arena_release_newfriendinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AcceptFriendResponse.newFriendInfo)
  
  ::Protocol::FriendInfo* temp = newfriendinfo_;
  newfriendinfo_ = nullptr;
  return temp;
}
inline ::Protocol::FriendInfo* S2C_AcceptFriendResponse::_internal_mutable_newfriendinfo() {
  
  if (newfriendinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::FriendInfo>(GetArenaForAllocation());
    newfriendinfo_ = p;
  }
  return newfriendinfo_;
}
inline ::Protocol::FriendInfo* S2C_AcceptFriendResponse::mutable_newfriendinfo() {
  ::Protocol::FriendInfo* _msg = _internal_mutable_newfriendinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AcceptFriendResponse.newFriendInfo)
  return _msg;
}
inline void S2C_AcceptFriendResponse::set_allocated_newfriendinfo(::Protocol::FriendInfo* newfriendinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete newfriendinfo_;
  }
  if (newfriendinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::FriendInfo>::GetOwningArena(newfriendinfo);
    if (message_arena != submessage_arena) {
      newfriendinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newfriendinfo, submessage_arena);
    }
    
  } else {
    
  }
  newfriendinfo_ = newfriendinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AcceptFriendResponse.newFriendInfo)
}

// -------------------------------------------------------------------

// S2O_AcceptFriendNotification

// .Protocol.FriendInfo newFriendInfo = 1;
inline bool S2O_AcceptFriendNotification::_internal_has_newfriendinfo() const {
  return this != internal_default_instance() && newfriendinfo_ != nullptr;
}
inline bool S2O_AcceptFriendNotification::has_newfriendinfo() const {
  return _internal_has_newfriendinfo();
}
inline void S2O_AcceptFriendNotification::clear_newfriendinfo() {
  if (GetArenaForAllocation() == nullptr && newfriendinfo_ != nullptr) {
    delete newfriendinfo_;
  }
  newfriendinfo_ = nullptr;
}
inline const ::Protocol::FriendInfo& S2O_AcceptFriendNotification::_internal_newfriendinfo() const {
  const ::Protocol::FriendInfo* p = newfriendinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::FriendInfo&>(
      ::Protocol::_FriendInfo_default_instance_);
}
inline const ::Protocol::FriendInfo& S2O_AcceptFriendNotification::newfriendinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S2O_AcceptFriendNotification.newFriendInfo)
  return _internal_newfriendinfo();
}
inline void S2O_AcceptFriendNotification::unsafe_arena_set_allocated_newfriendinfo(
    ::Protocol::FriendInfo* newfriendinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newfriendinfo_);
  }
  newfriendinfo_ = newfriendinfo;
  if (newfriendinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2O_AcceptFriendNotification.newFriendInfo)
}
inline ::Protocol::FriendInfo* S2O_AcceptFriendNotification::release_newfriendinfo() {
  
  ::Protocol::FriendInfo* temp = newfriendinfo_;
  newfriendinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::FriendInfo* S2O_AcceptFriendNotification::unsafe_arena_release_newfriendinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S2O_AcceptFriendNotification.newFriendInfo)
  
  ::Protocol::FriendInfo* temp = newfriendinfo_;
  newfriendinfo_ = nullptr;
  return temp;
}
inline ::Protocol::FriendInfo* S2O_AcceptFriendNotification::_internal_mutable_newfriendinfo() {
  
  if (newfriendinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::FriendInfo>(GetArenaForAllocation());
    newfriendinfo_ = p;
  }
  return newfriendinfo_;
}
inline ::Protocol::FriendInfo* S2O_AcceptFriendNotification::mutable_newfriendinfo() {
  ::Protocol::FriendInfo* _msg = _internal_mutable_newfriendinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S2O_AcceptFriendNotification.newFriendInfo)
  return _msg;
}
inline void S2O_AcceptFriendNotification::set_allocated_newfriendinfo(::Protocol::FriendInfo* newfriendinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete newfriendinfo_;
  }
  if (newfriendinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::FriendInfo>::GetOwningArena(newfriendinfo);
    if (message_arena != submessage_arena) {
      newfriendinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newfriendinfo, submessage_arena);
    }
    
  } else {
    
  }
  newfriendinfo_ = newfriendinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2O_AcceptFriendNotification.newFriendInfo)
}

// -------------------------------------------------------------------

// C2S_RefuseFriendRequest

// string refusedUsername = 1;
inline void C2S_RefuseFriendRequest::clear_refusedusername() {
  refusedusername_.ClearToEmpty();
}
inline const std::string& C2S_RefuseFriendRequest::refusedusername() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_RefuseFriendRequest.refusedUsername)
  return _internal_refusedusername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_RefuseFriendRequest::set_refusedusername(ArgT0&& arg0, ArgT... args) {
 
 refusedusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_RefuseFriendRequest.refusedUsername)
}
inline std::string* C2S_RefuseFriendRequest::mutable_refusedusername() {
  std::string* _s = _internal_mutable_refusedusername();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_RefuseFriendRequest.refusedUsername)
  return _s;
}
inline const std::string& C2S_RefuseFriendRequest::_internal_refusedusername() const {
  return refusedusername_.Get();
}
inline void C2S_RefuseFriendRequest::_internal_set_refusedusername(const std::string& value) {
  
  refusedusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_RefuseFriendRequest::_internal_mutable_refusedusername() {
  
  return refusedusername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_RefuseFriendRequest::release_refusedusername() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_RefuseFriendRequest.refusedUsername)
  return refusedusername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2S_RefuseFriendRequest::set_allocated_refusedusername(std::string* refusedusername) {
  if (refusedusername != nullptr) {
    
  } else {
    
  }
  refusedusername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refusedusername,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (refusedusername_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    refusedusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_RefuseFriendRequest.refusedUsername)
}

// -------------------------------------------------------------------

// S2C_RefuseFriendResponse

// .google.protobuf.BoolValue success = 1;
inline bool S2C_RefuseFriendResponse::_internal_has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline bool S2C_RefuseFriendResponse::has_success() const {
  return _internal_has_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_RefuseFriendResponse::_internal_success() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = success_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_RefuseFriendResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RefuseFriendResponse.success)
  return _internal_success();
}
inline void S2C_RefuseFriendResponse::unsafe_arena_set_allocated_success(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_RefuseFriendResponse.success)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_RefuseFriendResponse::release_success() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_RefuseFriendResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_RefuseFriendResponse.success)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_RefuseFriendResponse::_internal_mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    success_ = p;
  }
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_RefuseFriendResponse::mutable_success() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_RefuseFriendResponse.success)
  return _msg;
}
inline void S2C_RefuseFriendResponse::set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success));
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_RefuseFriendResponse.success)
}

// string refusedUsername = 2;
inline void S2C_RefuseFriendResponse::clear_refusedusername() {
  refusedusername_.ClearToEmpty();
}
inline const std::string& S2C_RefuseFriendResponse::refusedusername() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RefuseFriendResponse.refusedUsername)
  return _internal_refusedusername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_RefuseFriendResponse::set_refusedusername(ArgT0&& arg0, ArgT... args) {
 
 refusedusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_RefuseFriendResponse.refusedUsername)
}
inline std::string* S2C_RefuseFriendResponse::mutable_refusedusername() {
  std::string* _s = _internal_mutable_refusedusername();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_RefuseFriendResponse.refusedUsername)
  return _s;
}
inline const std::string& S2C_RefuseFriendResponse::_internal_refusedusername() const {
  return refusedusername_.Get();
}
inline void S2C_RefuseFriendResponse::_internal_set_refusedusername(const std::string& value) {
  
  refusedusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S2C_RefuseFriendResponse::_internal_mutable_refusedusername() {
  
  return refusedusername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S2C_RefuseFriendResponse::release_refusedusername() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_RefuseFriendResponse.refusedUsername)
  return refusedusername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S2C_RefuseFriendResponse::set_allocated_refusedusername(std::string* refusedusername) {
  if (refusedusername != nullptr) {
    
  } else {
    
  }
  refusedusername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refusedusername,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (refusedusername_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    refusedusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_RefuseFriendResponse.refusedUsername)
}

// -------------------------------------------------------------------

// C2S_DelFriendRequest

// string friendName = 1;
inline void C2S_DelFriendRequest::clear_friendname() {
  friendname_.ClearToEmpty();
}
inline const std::string& C2S_DelFriendRequest::friendname() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_DelFriendRequest.friendName)
  return _internal_friendname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_DelFriendRequest::set_friendname(ArgT0&& arg0, ArgT... args) {
 
 friendname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_DelFriendRequest.friendName)
}
inline std::string* C2S_DelFriendRequest::mutable_friendname() {
  std::string* _s = _internal_mutable_friendname();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_DelFriendRequest.friendName)
  return _s;
}
inline const std::string& C2S_DelFriendRequest::_internal_friendname() const {
  return friendname_.Get();
}
inline void C2S_DelFriendRequest::_internal_set_friendname(const std::string& value) {
  
  friendname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_DelFriendRequest::_internal_mutable_friendname() {
  
  return friendname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_DelFriendRequest::release_friendname() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_DelFriendRequest.friendName)
  return friendname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2S_DelFriendRequest::set_allocated_friendname(std::string* friendname) {
  if (friendname != nullptr) {
    
  } else {
    
  }
  friendname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friendname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (friendname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    friendname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_DelFriendRequest.friendName)
}

// -------------------------------------------------------------------

// S2C_DelFriendResponse

// .google.protobuf.BoolValue success = 1;
inline bool S2C_DelFriendResponse::_internal_has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline bool S2C_DelFriendResponse::has_success() const {
  return _internal_has_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_DelFriendResponse::_internal_success() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = success_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_DelFriendResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DelFriendResponse.success)
  return _internal_success();
}
inline void S2C_DelFriendResponse::unsafe_arena_set_allocated_success(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_DelFriendResponse.success)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_DelFriendResponse::release_success() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_DelFriendResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_DelFriendResponse.success)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_DelFriendResponse::_internal_mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    success_ = p;
  }
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_DelFriendResponse::mutable_success() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_DelFriendResponse.success)
  return _msg;
}
inline void S2C_DelFriendResponse::set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success));
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_DelFriendResponse.success)
}

// string delFriendName = 2;
inline void S2C_DelFriendResponse::clear_delfriendname() {
  delfriendname_.ClearToEmpty();
}
inline const std::string& S2C_DelFriendResponse::delfriendname() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DelFriendResponse.delFriendName)
  return _internal_delfriendname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_DelFriendResponse::set_delfriendname(ArgT0&& arg0, ArgT... args) {
 
 delfriendname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_DelFriendResponse.delFriendName)
}
inline std::string* S2C_DelFriendResponse::mutable_delfriendname() {
  std::string* _s = _internal_mutable_delfriendname();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_DelFriendResponse.delFriendName)
  return _s;
}
inline const std::string& S2C_DelFriendResponse::_internal_delfriendname() const {
  return delfriendname_.Get();
}
inline void S2C_DelFriendResponse::_internal_set_delfriendname(const std::string& value) {
  
  delfriendname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S2C_DelFriendResponse::_internal_mutable_delfriendname() {
  
  return delfriendname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S2C_DelFriendResponse::release_delfriendname() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_DelFriendResponse.delFriendName)
  return delfriendname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S2C_DelFriendResponse::set_allocated_delfriendname(std::string* delfriendname) {
  if (delfriendname != nullptr) {
    
  } else {
    
  }
  delfriendname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delfriendname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (delfriendname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    delfriendname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_DelFriendResponse.delFriendName)
}

// -------------------------------------------------------------------

// S2O_DelFriendNotification

// string delFriendName = 1;
inline void S2O_DelFriendNotification::clear_delfriendname() {
  delfriendname_.ClearToEmpty();
}
inline const std::string& S2O_DelFriendNotification::delfriendname() const {
  // @@protoc_insertion_point(field_get:Protocol.S2O_DelFriendNotification.delFriendName)
  return _internal_delfriendname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2O_DelFriendNotification::set_delfriendname(ArgT0&& arg0, ArgT... args) {
 
 delfriendname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2O_DelFriendNotification.delFriendName)
}
inline std::string* S2O_DelFriendNotification::mutable_delfriendname() {
  std::string* _s = _internal_mutable_delfriendname();
  // @@protoc_insertion_point(field_mutable:Protocol.S2O_DelFriendNotification.delFriendName)
  return _s;
}
inline const std::string& S2O_DelFriendNotification::_internal_delfriendname() const {
  return delfriendname_.Get();
}
inline void S2O_DelFriendNotification::_internal_set_delfriendname(const std::string& value) {
  
  delfriendname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S2O_DelFriendNotification::_internal_mutable_delfriendname() {
  
  return delfriendname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S2O_DelFriendNotification::release_delfriendname() {
  // @@protoc_insertion_point(field_release:Protocol.S2O_DelFriendNotification.delFriendName)
  return delfriendname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S2O_DelFriendNotification::set_allocated_delfriendname(std::string* delfriendname) {
  if (delfriendname != nullptr) {
    
  } else {
    
  }
  delfriendname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delfriendname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (delfriendname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    delfriendname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2O_DelFriendNotification.delFriendName)
}

// -------------------------------------------------------------------

// S2O_UpdateStateNotification

// .Protocol.FriendInfo friendInfo = 1;
inline bool S2O_UpdateStateNotification::_internal_has_friendinfo() const {
  return this != internal_default_instance() && friendinfo_ != nullptr;
}
inline bool S2O_UpdateStateNotification::has_friendinfo() const {
  return _internal_has_friendinfo();
}
inline void S2O_UpdateStateNotification::clear_friendinfo() {
  if (GetArenaForAllocation() == nullptr && friendinfo_ != nullptr) {
    delete friendinfo_;
  }
  friendinfo_ = nullptr;
}
inline const ::Protocol::FriendInfo& S2O_UpdateStateNotification::_internal_friendinfo() const {
  const ::Protocol::FriendInfo* p = friendinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::FriendInfo&>(
      ::Protocol::_FriendInfo_default_instance_);
}
inline const ::Protocol::FriendInfo& S2O_UpdateStateNotification::friendinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S2O_UpdateStateNotification.friendInfo)
  return _internal_friendinfo();
}
inline void S2O_UpdateStateNotification::unsafe_arena_set_allocated_friendinfo(
    ::Protocol::FriendInfo* friendinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friendinfo_);
  }
  friendinfo_ = friendinfo;
  if (friendinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2O_UpdateStateNotification.friendInfo)
}
inline ::Protocol::FriendInfo* S2O_UpdateStateNotification::release_friendinfo() {
  
  ::Protocol::FriendInfo* temp = friendinfo_;
  friendinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::FriendInfo* S2O_UpdateStateNotification::unsafe_arena_release_friendinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S2O_UpdateStateNotification.friendInfo)
  
  ::Protocol::FriendInfo* temp = friendinfo_;
  friendinfo_ = nullptr;
  return temp;
}
inline ::Protocol::FriendInfo* S2O_UpdateStateNotification::_internal_mutable_friendinfo() {
  
  if (friendinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::FriendInfo>(GetArenaForAllocation());
    friendinfo_ = p;
  }
  return friendinfo_;
}
inline ::Protocol::FriendInfo* S2O_UpdateStateNotification::mutable_friendinfo() {
  ::Protocol::FriendInfo* _msg = _internal_mutable_friendinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S2O_UpdateStateNotification.friendInfo)
  return _msg;
}
inline void S2O_UpdateStateNotification::set_allocated_friendinfo(::Protocol::FriendInfo* friendinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete friendinfo_;
  }
  if (friendinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Protocol::FriendInfo>::GetOwningArena(friendinfo);
    if (message_arena != submessage_arena) {
      friendinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendinfo, submessage_arena);
    }
    
  } else {
    
  }
  friendinfo_ = friendinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2O_UpdateStateNotification.friendInfo)
}

// -------------------------------------------------------------------

// C2S_CreateRoomRequest

// -------------------------------------------------------------------

// S2C_CreateRoomResponse

// .google.protobuf.BoolValue success = 1;
inline bool S2C_CreateRoomResponse::_internal_has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline bool S2C_CreateRoomResponse::has_success() const {
  return _internal_has_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_CreateRoomResponse::_internal_success() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = success_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_CreateRoomResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_CreateRoomResponse.success)
  return _internal_success();
}
inline void S2C_CreateRoomResponse::unsafe_arena_set_allocated_success(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_CreateRoomResponse.success)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_CreateRoomResponse::release_success() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_CreateRoomResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_CreateRoomResponse.success)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_CreateRoomResponse::_internal_mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    success_ = p;
  }
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_CreateRoomResponse::mutable_success() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_CreateRoomResponse.success)
  return _msg;
}
inline void S2C_CreateRoomResponse::set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success));
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_CreateRoomResponse.success)
}

// string roomCode = 2;
inline void S2C_CreateRoomResponse::clear_roomcode() {
  roomcode_.ClearToEmpty();
}
inline const std::string& S2C_CreateRoomResponse::roomcode() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_CreateRoomResponse.roomCode)
  return _internal_roomcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_CreateRoomResponse::set_roomcode(ArgT0&& arg0, ArgT... args) {
 
 roomcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_CreateRoomResponse.roomCode)
}
inline std::string* S2C_CreateRoomResponse::mutable_roomcode() {
  std::string* _s = _internal_mutable_roomcode();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_CreateRoomResponse.roomCode)
  return _s;
}
inline const std::string& S2C_CreateRoomResponse::_internal_roomcode() const {
  return roomcode_.Get();
}
inline void S2C_CreateRoomResponse::_internal_set_roomcode(const std::string& value) {
  
  roomcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S2C_CreateRoomResponse::_internal_mutable_roomcode() {
  
  return roomcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S2C_CreateRoomResponse::release_roomcode() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_CreateRoomResponse.roomCode)
  return roomcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S2C_CreateRoomResponse::set_allocated_roomcode(std::string* roomcode) {
  if (roomcode != nullptr) {
    
  } else {
    
  }
  roomcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomcode,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomcode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    roomcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_CreateRoomResponse.roomCode)
}

// -------------------------------------------------------------------

// C2S_JoinRoomRequest

// string roomCode = 1;
inline void C2S_JoinRoomRequest::clear_roomcode() {
  roomcode_.ClearToEmpty();
}
inline const std::string& C2S_JoinRoomRequest::roomcode() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_JoinRoomRequest.roomCode)
  return _internal_roomcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_JoinRoomRequest::set_roomcode(ArgT0&& arg0, ArgT... args) {
 
 roomcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_JoinRoomRequest.roomCode)
}
inline std::string* C2S_JoinRoomRequest::mutable_roomcode() {
  std::string* _s = _internal_mutable_roomcode();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_JoinRoomRequest.roomCode)
  return _s;
}
inline const std::string& C2S_JoinRoomRequest::_internal_roomcode() const {
  return roomcode_.Get();
}
inline void C2S_JoinRoomRequest::_internal_set_roomcode(const std::string& value) {
  
  roomcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_JoinRoomRequest::_internal_mutable_roomcode() {
  
  return roomcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_JoinRoomRequest::release_roomcode() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_JoinRoomRequest.roomCode)
  return roomcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2S_JoinRoomRequest::set_allocated_roomcode(std::string* roomcode) {
  if (roomcode != nullptr) {
    
  } else {
    
  }
  roomcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomcode,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomcode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    roomcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_JoinRoomRequest.roomCode)
}

// -------------------------------------------------------------------

// S2C_JoinRoomResponse

// int32 resultCode = 1;
inline void S2C_JoinRoomResponse::clear_resultcode() {
  resultcode_ = 0;
}
inline int32_t S2C_JoinRoomResponse::_internal_resultcode() const {
  return resultcode_;
}
inline int32_t S2C_JoinRoomResponse::resultcode() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_JoinRoomResponse.resultCode)
  return _internal_resultcode();
}
inline void S2C_JoinRoomResponse::_internal_set_resultcode(int32_t value) {
  
  resultcode_ = value;
}
inline void S2C_JoinRoomResponse::set_resultcode(int32_t value) {
  _internal_set_resultcode(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_JoinRoomResponse.resultCode)
}

// string ipAddress = 2;
inline void S2C_JoinRoomResponse::clear_ipaddress() {
  ipaddress_.ClearToEmpty();
}
inline const std::string& S2C_JoinRoomResponse::ipaddress() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_JoinRoomResponse.ipAddress)
  return _internal_ipaddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_JoinRoomResponse::set_ipaddress(ArgT0&& arg0, ArgT... args) {
 
 ipaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_JoinRoomResponse.ipAddress)
}
inline std::string* S2C_JoinRoomResponse::mutable_ipaddress() {
  std::string* _s = _internal_mutable_ipaddress();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_JoinRoomResponse.ipAddress)
  return _s;
}
inline const std::string& S2C_JoinRoomResponse::_internal_ipaddress() const {
  return ipaddress_.Get();
}
inline void S2C_JoinRoomResponse::_internal_set_ipaddress(const std::string& value) {
  
  ipaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S2C_JoinRoomResponse::_internal_mutable_ipaddress() {
  
  return ipaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S2C_JoinRoomResponse::release_ipaddress() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_JoinRoomResponse.ipAddress)
  return ipaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S2C_JoinRoomResponse::set_allocated_ipaddress(std::string* ipaddress) {
  if (ipaddress != nullptr) {
    
  } else {
    
  }
  ipaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipaddress,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipaddress_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_JoinRoomResponse.ipAddress)
}

// -------------------------------------------------------------------

// C2S_QuitRoomRequest

// -------------------------------------------------------------------

// S2C_QuitRoomResponse

// .google.protobuf.BoolValue success = 1;
inline bool S2C_QuitRoomResponse::_internal_has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline bool S2C_QuitRoomResponse::has_success() const {
  return _internal_has_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_QuitRoomResponse::_internal_success() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = success_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_QuitRoomResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_QuitRoomResponse.success)
  return _internal_success();
}
inline void S2C_QuitRoomResponse::unsafe_arena_set_allocated_success(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_QuitRoomResponse.success)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_QuitRoomResponse::release_success() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_QuitRoomResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_QuitRoomResponse.success)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_QuitRoomResponse::_internal_mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    success_ = p;
  }
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_QuitRoomResponse::mutable_success() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_QuitRoomResponse.success)
  return _msg;
}
inline void S2C_QuitRoomResponse::set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success));
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_QuitRoomResponse.success)
}

// -------------------------------------------------------------------

// C2S_InviteFriendRequest

// string username = 1;
inline void C2S_InviteFriendRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& C2S_InviteFriendRequest::username() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_InviteFriendRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_InviteFriendRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_InviteFriendRequest.username)
}
inline std::string* C2S_InviteFriendRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_InviteFriendRequest.username)
  return _s;
}
inline const std::string& C2S_InviteFriendRequest::_internal_username() const {
  return username_.Get();
}
inline void C2S_InviteFriendRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_InviteFriendRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_InviteFriendRequest::release_username() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_InviteFriendRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2S_InviteFriendRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_InviteFriendRequest.username)
}

// -------------------------------------------------------------------

// S2C_InviteFriendResponse

// .google.protobuf.BoolValue success = 1;
inline bool S2C_InviteFriendResponse::_internal_has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline bool S2C_InviteFriendResponse::has_success() const {
  return _internal_has_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_InviteFriendResponse::_internal_success() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = success_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_InviteFriendResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_InviteFriendResponse.success)
  return _internal_success();
}
inline void S2C_InviteFriendResponse::unsafe_arena_set_allocated_success(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_InviteFriendResponse.success)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_InviteFriendResponse::release_success() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_InviteFriendResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_InviteFriendResponse.success)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_InviteFriendResponse::_internal_mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    success_ = p;
  }
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_InviteFriendResponse::mutable_success() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_InviteFriendResponse.success)
  return _msg;
}
inline void S2C_InviteFriendResponse::set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success));
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_InviteFriendResponse.success)
}

// string invitedUserName = 2;
inline void S2C_InviteFriendResponse::clear_invitedusername() {
  invitedusername_.ClearToEmpty();
}
inline const std::string& S2C_InviteFriendResponse::invitedusername() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_InviteFriendResponse.invitedUserName)
  return _internal_invitedusername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_InviteFriendResponse::set_invitedusername(ArgT0&& arg0, ArgT... args) {
 
 invitedusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_InviteFriendResponse.invitedUserName)
}
inline std::string* S2C_InviteFriendResponse::mutable_invitedusername() {
  std::string* _s = _internal_mutable_invitedusername();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_InviteFriendResponse.invitedUserName)
  return _s;
}
inline const std::string& S2C_InviteFriendResponse::_internal_invitedusername() const {
  return invitedusername_.Get();
}
inline void S2C_InviteFriendResponse::_internal_set_invitedusername(const std::string& value) {
  
  invitedusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S2C_InviteFriendResponse::_internal_mutable_invitedusername() {
  
  return invitedusername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S2C_InviteFriendResponse::release_invitedusername() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_InviteFriendResponse.invitedUserName)
  return invitedusername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S2C_InviteFriendResponse::set_allocated_invitedusername(std::string* invitedusername) {
  if (invitedusername != nullptr) {
    
  } else {
    
  }
  invitedusername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitedusername,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invitedusername_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invitedusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_InviteFriendResponse.invitedUserName)
}

// -------------------------------------------------------------------

// S2O_InviteFriendNotification

// string username = 1;
inline void S2O_InviteFriendNotification::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& S2O_InviteFriendNotification::username() const {
  // @@protoc_insertion_point(field_get:Protocol.S2O_InviteFriendNotification.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2O_InviteFriendNotification::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2O_InviteFriendNotification.username)
}
inline std::string* S2O_InviteFriendNotification::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Protocol.S2O_InviteFriendNotification.username)
  return _s;
}
inline const std::string& S2O_InviteFriendNotification::_internal_username() const {
  return username_.Get();
}
inline void S2O_InviteFriendNotification::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S2O_InviteFriendNotification::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S2O_InviteFriendNotification::release_username() {
  // @@protoc_insertion_point(field_release:Protocol.S2O_InviteFriendNotification.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S2O_InviteFriendNotification::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2O_InviteFriendNotification.username)
}

// string roomCode = 2;
inline void S2O_InviteFriendNotification::clear_roomcode() {
  roomcode_.ClearToEmpty();
}
inline const std::string& S2O_InviteFriendNotification::roomcode() const {
  // @@protoc_insertion_point(field_get:Protocol.S2O_InviteFriendNotification.roomCode)
  return _internal_roomcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2O_InviteFriendNotification::set_roomcode(ArgT0&& arg0, ArgT... args) {
 
 roomcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2O_InviteFriendNotification.roomCode)
}
inline std::string* S2O_InviteFriendNotification::mutable_roomcode() {
  std::string* _s = _internal_mutable_roomcode();
  // @@protoc_insertion_point(field_mutable:Protocol.S2O_InviteFriendNotification.roomCode)
  return _s;
}
inline const std::string& S2O_InviteFriendNotification::_internal_roomcode() const {
  return roomcode_.Get();
}
inline void S2O_InviteFriendNotification::_internal_set_roomcode(const std::string& value) {
  
  roomcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S2O_InviteFriendNotification::_internal_mutable_roomcode() {
  
  return roomcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S2O_InviteFriendNotification::release_roomcode() {
  // @@protoc_insertion_point(field_release:Protocol.S2O_InviteFriendNotification.roomCode)
  return roomcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S2O_InviteFriendNotification::set_allocated_roomcode(std::string* roomcode) {
  if (roomcode != nullptr) {
    
  } else {
    
  }
  roomcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomcode,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomcode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    roomcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2O_InviteFriendNotification.roomCode)
}

// -------------------------------------------------------------------

// C2S_StartGameRequest

// -------------------------------------------------------------------

// S2C_StartGameResponse

// .google.protobuf.BoolValue success = 1;
inline bool S2C_StartGameResponse::_internal_has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline bool S2C_StartGameResponse::has_success() const {
  return _internal_has_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_StartGameResponse::_internal_success() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = success_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_StartGameResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_StartGameResponse.success)
  return _internal_success();
}
inline void S2C_StartGameResponse::unsafe_arena_set_allocated_success(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_StartGameResponse.success)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_StartGameResponse::release_success() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_StartGameResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_StartGameResponse.success)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_StartGameResponse::_internal_mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    success_ = p;
  }
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_StartGameResponse::mutable_success() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_StartGameResponse.success)
  return _msg;
}
inline void S2C_StartGameResponse::set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success));
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_StartGameResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
