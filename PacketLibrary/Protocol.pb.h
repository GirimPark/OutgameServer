// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C2S_CreateRoomRequest;
struct C2S_CreateRoomRequestDefaultTypeInternal;
extern C2S_CreateRoomRequestDefaultTypeInternal _C2S_CreateRoomRequest_default_instance_;
class C2S_InviteUserRequest;
struct C2S_InviteUserRequestDefaultTypeInternal;
extern C2S_InviteUserRequestDefaultTypeInternal _C2S_InviteUserRequest_default_instance_;
class C2S_JoinRequest;
struct C2S_JoinRequestDefaultTypeInternal;
extern C2S_JoinRequestDefaultTypeInternal _C2S_JoinRequest_default_instance_;
class C2S_JoinRoomRequest;
struct C2S_JoinRoomRequestDefaultTypeInternal;
extern C2S_JoinRoomRequestDefaultTypeInternal _C2S_JoinRoomRequest_default_instance_;
class C2S_LoginRequest;
struct C2S_LoginRequestDefaultTypeInternal;
extern C2S_LoginRequestDefaultTypeInternal _C2S_LoginRequest_default_instance_;
class C2S_LogoutRequest;
struct C2S_LogoutRequestDefaultTypeInternal;
extern C2S_LogoutRequestDefaultTypeInternal _C2S_LogoutRequest_default_instance_;
class C2S_QuitRoomRequest;
struct C2S_QuitRoomRequestDefaultTypeInternal;
extern C2S_QuitRoomRequestDefaultTypeInternal _C2S_QuitRoomRequest_default_instance_;
class C2S_StartGameRequest;
struct C2S_StartGameRequestDefaultTypeInternal;
extern C2S_StartGameRequestDefaultTypeInternal _C2S_StartGameRequest_default_instance_;
class C2S_ValidationResponse;
struct C2S_ValidationResponseDefaultTypeInternal;
extern C2S_ValidationResponseDefaultTypeInternal _C2S_ValidationResponse_default_instance_;
class S2C_CreateRoomResponse;
struct S2C_CreateRoomResponseDefaultTypeInternal;
extern S2C_CreateRoomResponseDefaultTypeInternal _S2C_CreateRoomResponse_default_instance_;
class S2C_InviteUserNotification;
struct S2C_InviteUserNotificationDefaultTypeInternal;
extern S2C_InviteUserNotificationDefaultTypeInternal _S2C_InviteUserNotification_default_instance_;
class S2C_InviteUserResponse;
struct S2C_InviteUserResponseDefaultTypeInternal;
extern S2C_InviteUserResponseDefaultTypeInternal _S2C_InviteUserResponse_default_instance_;
class S2C_JoinResponse;
struct S2C_JoinResponseDefaultTypeInternal;
extern S2C_JoinResponseDefaultTypeInternal _S2C_JoinResponse_default_instance_;
class S2C_JoinRoomResponse;
struct S2C_JoinRoomResponseDefaultTypeInternal;
extern S2C_JoinRoomResponseDefaultTypeInternal _S2C_JoinRoomResponse_default_instance_;
class S2C_LoginResponse;
struct S2C_LoginResponseDefaultTypeInternal;
extern S2C_LoginResponseDefaultTypeInternal _S2C_LoginResponse_default_instance_;
class S2C_LogoutResponse;
struct S2C_LogoutResponseDefaultTypeInternal;
extern S2C_LogoutResponseDefaultTypeInternal _S2C_LogoutResponse_default_instance_;
class S2C_QuitRoomResponse;
struct S2C_QuitRoomResponseDefaultTypeInternal;
extern S2C_QuitRoomResponseDefaultTypeInternal _S2C_QuitRoomResponse_default_instance_;
class S2C_SessionExpiredNotification;
struct S2C_SessionExpiredNotificationDefaultTypeInternal;
extern S2C_SessionExpiredNotificationDefaultTypeInternal _S2C_SessionExpiredNotification_default_instance_;
class S2C_StartGameResponse;
struct S2C_StartGameResponseDefaultTypeInternal;
extern S2C_StartGameResponseDefaultTypeInternal _S2C_StartGameResponse_default_instance_;
class S2C_ValidationRequest;
struct S2C_ValidationRequestDefaultTypeInternal;
extern S2C_ValidationRequestDefaultTypeInternal _S2C_ValidationRequest_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C2S_CreateRoomRequest* Arena::CreateMaybeMessage<::Protocol::C2S_CreateRoomRequest>(Arena*);
template<> ::Protocol::C2S_InviteUserRequest* Arena::CreateMaybeMessage<::Protocol::C2S_InviteUserRequest>(Arena*);
template<> ::Protocol::C2S_JoinRequest* Arena::CreateMaybeMessage<::Protocol::C2S_JoinRequest>(Arena*);
template<> ::Protocol::C2S_JoinRoomRequest* Arena::CreateMaybeMessage<::Protocol::C2S_JoinRoomRequest>(Arena*);
template<> ::Protocol::C2S_LoginRequest* Arena::CreateMaybeMessage<::Protocol::C2S_LoginRequest>(Arena*);
template<> ::Protocol::C2S_LogoutRequest* Arena::CreateMaybeMessage<::Protocol::C2S_LogoutRequest>(Arena*);
template<> ::Protocol::C2S_QuitRoomRequest* Arena::CreateMaybeMessage<::Protocol::C2S_QuitRoomRequest>(Arena*);
template<> ::Protocol::C2S_StartGameRequest* Arena::CreateMaybeMessage<::Protocol::C2S_StartGameRequest>(Arena*);
template<> ::Protocol::C2S_ValidationResponse* Arena::CreateMaybeMessage<::Protocol::C2S_ValidationResponse>(Arena*);
template<> ::Protocol::S2C_CreateRoomResponse* Arena::CreateMaybeMessage<::Protocol::S2C_CreateRoomResponse>(Arena*);
template<> ::Protocol::S2C_InviteUserNotification* Arena::CreateMaybeMessage<::Protocol::S2C_InviteUserNotification>(Arena*);
template<> ::Protocol::S2C_InviteUserResponse* Arena::CreateMaybeMessage<::Protocol::S2C_InviteUserResponse>(Arena*);
template<> ::Protocol::S2C_JoinResponse* Arena::CreateMaybeMessage<::Protocol::S2C_JoinResponse>(Arena*);
template<> ::Protocol::S2C_JoinRoomResponse* Arena::CreateMaybeMessage<::Protocol::S2C_JoinRoomResponse>(Arena*);
template<> ::Protocol::S2C_LoginResponse* Arena::CreateMaybeMessage<::Protocol::S2C_LoginResponse>(Arena*);
template<> ::Protocol::S2C_LogoutResponse* Arena::CreateMaybeMessage<::Protocol::S2C_LogoutResponse>(Arena*);
template<> ::Protocol::S2C_QuitRoomResponse* Arena::CreateMaybeMessage<::Protocol::S2C_QuitRoomResponse>(Arena*);
template<> ::Protocol::S2C_SessionExpiredNotification* Arena::CreateMaybeMessage<::Protocol::S2C_SessionExpiredNotification>(Arena*);
template<> ::Protocol::S2C_StartGameResponse* Arena::CreateMaybeMessage<::Protocol::S2C_StartGameResponse>(Arena*);
template<> ::Protocol::S2C_ValidationRequest* Arena::CreateMaybeMessage<::Protocol::S2C_ValidationRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class S2C_ValidationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S2C_ValidationRequest) */ {
 public:
  inline S2C_ValidationRequest() : S2C_ValidationRequest(nullptr) {}
  explicit constexpr S2C_ValidationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_ValidationRequest(const S2C_ValidationRequest& from);
  S2C_ValidationRequest(S2C_ValidationRequest&& from) noexcept
    : S2C_ValidationRequest() {
    *this = ::std::move(from);
  }

  inline S2C_ValidationRequest& operator=(const S2C_ValidationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_ValidationRequest& operator=(S2C_ValidationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_ValidationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_ValidationRequest* internal_default_instance() {
    return reinterpret_cast<const S2C_ValidationRequest*>(
               &_S2C_ValidationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S2C_ValidationRequest& a, S2C_ValidationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_ValidationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_ValidationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_ValidationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_ValidationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S2C_ValidationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S2C_ValidationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_ValidationRequest";
  }
  protected:
  explicit S2C_ValidationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S2C_ValidationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_ValidationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_ValidationResponse) */ {
 public:
  inline C2S_ValidationResponse() : C2S_ValidationResponse(nullptr) {}
  explicit constexpr C2S_ValidationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_ValidationResponse(const C2S_ValidationResponse& from);
  C2S_ValidationResponse(C2S_ValidationResponse&& from) noexcept
    : C2S_ValidationResponse() {
    *this = ::std::move(from);
  }

  inline C2S_ValidationResponse& operator=(const C2S_ValidationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_ValidationResponse& operator=(C2S_ValidationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_ValidationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_ValidationResponse* internal_default_instance() {
    return reinterpret_cast<const C2S_ValidationResponse*>(
               &_C2S_ValidationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C2S_ValidationResponse& a, C2S_ValidationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_ValidationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_ValidationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_ValidationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_ValidationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_ValidationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_ValidationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_ValidationResponse";
  }
  protected:
  explicit C2S_ValidationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_ValidationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_SessionExpiredNotification final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S2C_SessionExpiredNotification) */ {
 public:
  inline S2C_SessionExpiredNotification() : S2C_SessionExpiredNotification(nullptr) {}
  explicit constexpr S2C_SessionExpiredNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_SessionExpiredNotification(const S2C_SessionExpiredNotification& from);
  S2C_SessionExpiredNotification(S2C_SessionExpiredNotification&& from) noexcept
    : S2C_SessionExpiredNotification() {
    *this = ::std::move(from);
  }

  inline S2C_SessionExpiredNotification& operator=(const S2C_SessionExpiredNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_SessionExpiredNotification& operator=(S2C_SessionExpiredNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_SessionExpiredNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_SessionExpiredNotification* internal_default_instance() {
    return reinterpret_cast<const S2C_SessionExpiredNotification*>(
               &_S2C_SessionExpiredNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S2C_SessionExpiredNotification& a, S2C_SessionExpiredNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_SessionExpiredNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_SessionExpiredNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_SessionExpiredNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_SessionExpiredNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S2C_SessionExpiredNotification& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S2C_SessionExpiredNotification& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_SessionExpiredNotification";
  }
  protected:
  explicit S2C_SessionExpiredNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S2C_SessionExpiredNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_LoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_LoginRequest) */ {
 public:
  inline C2S_LoginRequest() : C2S_LoginRequest(nullptr) {}
  ~C2S_LoginRequest() override;
  explicit constexpr C2S_LoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LoginRequest(const C2S_LoginRequest& from);
  C2S_LoginRequest(C2S_LoginRequest&& from) noexcept
    : C2S_LoginRequest() {
    *this = ::std::move(from);
  }

  inline C2S_LoginRequest& operator=(const C2S_LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LoginRequest& operator=(C2S_LoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LoginRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_LoginRequest*>(
               &_C2S_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C2S_LoginRequest& a, C2S_LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_LoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_LoginRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_LoginRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LoginRequest";
  }
  protected:
  explicit C2S_LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_LoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LoginResponse) */ {
 public:
  inline S2C_LoginResponse() : S2C_LoginResponse(nullptr) {}
  ~S2C_LoginResponse() override;
  explicit constexpr S2C_LoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LoginResponse(const S2C_LoginResponse& from);
  S2C_LoginResponse(S2C_LoginResponse&& from) noexcept
    : S2C_LoginResponse() {
    *this = ::std::move(from);
  }

  inline S2C_LoginResponse& operator=(const S2C_LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LoginResponse& operator=(S2C_LoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LoginResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_LoginResponse*>(
               &_S2C_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S2C_LoginResponse& a, S2C_LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LoginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LoginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_LoginResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LoginResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LoginResponse";
  }
  protected:
  explicit S2C_LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // .google.protobuf.BoolValue success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& success() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_success();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_success();
  void set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_success() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_success();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_LogoutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_LogoutRequest) */ {
 public:
  inline C2S_LogoutRequest() : C2S_LogoutRequest(nullptr) {}
  explicit constexpr C2S_LogoutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LogoutRequest(const C2S_LogoutRequest& from);
  C2S_LogoutRequest(C2S_LogoutRequest&& from) noexcept
    : C2S_LogoutRequest() {
    *this = ::std::move(from);
  }

  inline C2S_LogoutRequest& operator=(const C2S_LogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LogoutRequest& operator=(C2S_LogoutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LogoutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LogoutRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_LogoutRequest*>(
               &_C2S_LogoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C2S_LogoutRequest& a, C2S_LogoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LogoutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LogoutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LogoutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LogoutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_LogoutRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_LogoutRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LogoutRequest";
  }
  protected:
  explicit C2S_LogoutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LogoutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_LogoutResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S2C_LogoutResponse) */ {
 public:
  inline S2C_LogoutResponse() : S2C_LogoutResponse(nullptr) {}
  explicit constexpr S2C_LogoutResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LogoutResponse(const S2C_LogoutResponse& from);
  S2C_LogoutResponse(S2C_LogoutResponse&& from) noexcept
    : S2C_LogoutResponse() {
    *this = ::std::move(from);
  }

  inline S2C_LogoutResponse& operator=(const S2C_LogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LogoutResponse& operator=(S2C_LogoutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LogoutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LogoutResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_LogoutResponse*>(
               &_S2C_LogoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S2C_LogoutResponse& a, S2C_LogoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LogoutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LogoutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LogoutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LogoutResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S2C_LogoutResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S2C_LogoutResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LogoutResponse";
  }
  protected:
  explicit S2C_LogoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LogoutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_JoinRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_JoinRequest) */ {
 public:
  inline C2S_JoinRequest() : C2S_JoinRequest(nullptr) {}
  ~C2S_JoinRequest() override;
  explicit constexpr C2S_JoinRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_JoinRequest(const C2S_JoinRequest& from);
  C2S_JoinRequest(C2S_JoinRequest&& from) noexcept
    : C2S_JoinRequest() {
    *this = ::std::move(from);
  }

  inline C2S_JoinRequest& operator=(const C2S_JoinRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_JoinRequest& operator=(C2S_JoinRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_JoinRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_JoinRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_JoinRequest*>(
               &_C2S_JoinRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C2S_JoinRequest& a, C2S_JoinRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_JoinRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_JoinRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_JoinRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_JoinRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_JoinRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_JoinRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_JoinRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_JoinRequest";
  }
  protected:
  explicit C2S_JoinRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_JoinRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_JoinResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_JoinResponse) */ {
 public:
  inline S2C_JoinResponse() : S2C_JoinResponse(nullptr) {}
  ~S2C_JoinResponse() override;
  explicit constexpr S2C_JoinResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_JoinResponse(const S2C_JoinResponse& from);
  S2C_JoinResponse(S2C_JoinResponse&& from) noexcept
    : S2C_JoinResponse() {
    *this = ::std::move(from);
  }

  inline S2C_JoinResponse& operator=(const S2C_JoinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_JoinResponse& operator=(S2C_JoinResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_JoinResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_JoinResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_JoinResponse*>(
               &_S2C_JoinResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S2C_JoinResponse& a, S2C_JoinResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_JoinResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_JoinResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_JoinResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_JoinResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_JoinResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_JoinResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_JoinResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_JoinResponse";
  }
  protected:
  explicit S2C_JoinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // .google.protobuf.BoolValue success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& success() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_success();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_success();
  void set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_success() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_success();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_JoinResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_CreateRoomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_CreateRoomRequest) */ {
 public:
  inline C2S_CreateRoomRequest() : C2S_CreateRoomRequest(nullptr) {}
  explicit constexpr C2S_CreateRoomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_CreateRoomRequest(const C2S_CreateRoomRequest& from);
  C2S_CreateRoomRequest(C2S_CreateRoomRequest&& from) noexcept
    : C2S_CreateRoomRequest() {
    *this = ::std::move(from);
  }

  inline C2S_CreateRoomRequest& operator=(const C2S_CreateRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_CreateRoomRequest& operator=(C2S_CreateRoomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_CreateRoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_CreateRoomRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_CreateRoomRequest*>(
               &_C2S_CreateRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(C2S_CreateRoomRequest& a, C2S_CreateRoomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_CreateRoomRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_CreateRoomRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_CreateRoomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_CreateRoomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_CreateRoomRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_CreateRoomRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_CreateRoomRequest";
  }
  protected:
  explicit C2S_CreateRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_CreateRoomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_CreateRoomResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_CreateRoomResponse) */ {
 public:
  inline S2C_CreateRoomResponse() : S2C_CreateRoomResponse(nullptr) {}
  ~S2C_CreateRoomResponse() override;
  explicit constexpr S2C_CreateRoomResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_CreateRoomResponse(const S2C_CreateRoomResponse& from);
  S2C_CreateRoomResponse(S2C_CreateRoomResponse&& from) noexcept
    : S2C_CreateRoomResponse() {
    *this = ::std::move(from);
  }

  inline S2C_CreateRoomResponse& operator=(const S2C_CreateRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_CreateRoomResponse& operator=(S2C_CreateRoomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_CreateRoomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_CreateRoomResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_CreateRoomResponse*>(
               &_S2C_CreateRoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S2C_CreateRoomResponse& a, S2C_CreateRoomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_CreateRoomResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_CreateRoomResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_CreateRoomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_CreateRoomResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_CreateRoomResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_CreateRoomResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_CreateRoomResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_CreateRoomResponse";
  }
  protected:
  explicit S2C_CreateRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomCodeFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string roomCode = 2;
  void clear_roomcode();
  const std::string& roomcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomcode();
  PROTOBUF_NODISCARD std::string* release_roomcode();
  void set_allocated_roomcode(std::string* roomcode);
  private:
  const std::string& _internal_roomcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomcode(const std::string& value);
  std::string* _internal_mutable_roomcode();
  public:

  // .google.protobuf.BoolValue success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& success() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_success();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_success();
  void set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_success() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_success();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_CreateRoomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomcode_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_JoinRoomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_JoinRoomRequest) */ {
 public:
  inline C2S_JoinRoomRequest() : C2S_JoinRoomRequest(nullptr) {}
  ~C2S_JoinRoomRequest() override;
  explicit constexpr C2S_JoinRoomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_JoinRoomRequest(const C2S_JoinRoomRequest& from);
  C2S_JoinRoomRequest(C2S_JoinRoomRequest&& from) noexcept
    : C2S_JoinRoomRequest() {
    *this = ::std::move(from);
  }

  inline C2S_JoinRoomRequest& operator=(const C2S_JoinRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_JoinRoomRequest& operator=(C2S_JoinRoomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_JoinRoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_JoinRoomRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_JoinRoomRequest*>(
               &_C2S_JoinRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(C2S_JoinRoomRequest& a, C2S_JoinRoomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_JoinRoomRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_JoinRoomRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_JoinRoomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_JoinRoomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_JoinRoomRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_JoinRoomRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_JoinRoomRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_JoinRoomRequest";
  }
  protected:
  explicit C2S_JoinRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomCodeFieldNumber = 1,
  };
  // string roomCode = 1;
  void clear_roomcode();
  const std::string& roomcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomcode();
  PROTOBUF_NODISCARD std::string* release_roomcode();
  void set_allocated_roomcode(std::string* roomcode);
  private:
  const std::string& _internal_roomcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomcode(const std::string& value);
  std::string* _internal_mutable_roomcode();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_JoinRoomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_JoinRoomResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_JoinRoomResponse) */ {
 public:
  inline S2C_JoinRoomResponse() : S2C_JoinRoomResponse(nullptr) {}
  ~S2C_JoinRoomResponse() override;
  explicit constexpr S2C_JoinRoomResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_JoinRoomResponse(const S2C_JoinRoomResponse& from);
  S2C_JoinRoomResponse(S2C_JoinRoomResponse&& from) noexcept
    : S2C_JoinRoomResponse() {
    *this = ::std::move(from);
  }

  inline S2C_JoinRoomResponse& operator=(const S2C_JoinRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_JoinRoomResponse& operator=(S2C_JoinRoomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_JoinRoomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_JoinRoomResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_JoinRoomResponse*>(
               &_S2C_JoinRoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(S2C_JoinRoomResponse& a, S2C_JoinRoomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_JoinRoomResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_JoinRoomResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_JoinRoomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_JoinRoomResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_JoinRoomResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_JoinRoomResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_JoinRoomResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_JoinRoomResponse";
  }
  protected:
  explicit S2C_JoinRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string ipAddress = 2;
  void clear_ipaddress();
  const std::string& ipaddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipaddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipaddress();
  PROTOBUF_NODISCARD std::string* release_ipaddress();
  void set_allocated_ipaddress(std::string* ipaddress);
  private:
  const std::string& _internal_ipaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipaddress(const std::string& value);
  std::string* _internal_mutable_ipaddress();
  public:

  // .google.protobuf.BoolValue success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& success() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_success();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_success();
  void set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_success() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_success();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_JoinRoomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipaddress_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_QuitRoomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_QuitRoomRequest) */ {
 public:
  inline C2S_QuitRoomRequest() : C2S_QuitRoomRequest(nullptr) {}
  explicit constexpr C2S_QuitRoomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_QuitRoomRequest(const C2S_QuitRoomRequest& from);
  C2S_QuitRoomRequest(C2S_QuitRoomRequest&& from) noexcept
    : C2S_QuitRoomRequest() {
    *this = ::std::move(from);
  }

  inline C2S_QuitRoomRequest& operator=(const C2S_QuitRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_QuitRoomRequest& operator=(C2S_QuitRoomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_QuitRoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_QuitRoomRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_QuitRoomRequest*>(
               &_C2S_QuitRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(C2S_QuitRoomRequest& a, C2S_QuitRoomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_QuitRoomRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_QuitRoomRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_QuitRoomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_QuitRoomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_QuitRoomRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_QuitRoomRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_QuitRoomRequest";
  }
  protected:
  explicit C2S_QuitRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_QuitRoomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_QuitRoomResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_QuitRoomResponse) */ {
 public:
  inline S2C_QuitRoomResponse() : S2C_QuitRoomResponse(nullptr) {}
  ~S2C_QuitRoomResponse() override;
  explicit constexpr S2C_QuitRoomResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_QuitRoomResponse(const S2C_QuitRoomResponse& from);
  S2C_QuitRoomResponse(S2C_QuitRoomResponse&& from) noexcept
    : S2C_QuitRoomResponse() {
    *this = ::std::move(from);
  }

  inline S2C_QuitRoomResponse& operator=(const S2C_QuitRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_QuitRoomResponse& operator=(S2C_QuitRoomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_QuitRoomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_QuitRoomResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_QuitRoomResponse*>(
               &_S2C_QuitRoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(S2C_QuitRoomResponse& a, S2C_QuitRoomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_QuitRoomResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_QuitRoomResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_QuitRoomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_QuitRoomResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_QuitRoomResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_QuitRoomResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_QuitRoomResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_QuitRoomResponse";
  }
  protected:
  explicit S2C_QuitRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // .google.protobuf.BoolValue success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& success() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_success();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_success();
  void set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_success() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_success();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_QuitRoomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_InviteUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_InviteUserRequest) */ {
 public:
  inline C2S_InviteUserRequest() : C2S_InviteUserRequest(nullptr) {}
  ~C2S_InviteUserRequest() override;
  explicit constexpr C2S_InviteUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_InviteUserRequest(const C2S_InviteUserRequest& from);
  C2S_InviteUserRequest(C2S_InviteUserRequest&& from) noexcept
    : C2S_InviteUserRequest() {
    *this = ::std::move(from);
  }

  inline C2S_InviteUserRequest& operator=(const C2S_InviteUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_InviteUserRequest& operator=(C2S_InviteUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_InviteUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_InviteUserRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_InviteUserRequest*>(
               &_C2S_InviteUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(C2S_InviteUserRequest& a, C2S_InviteUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_InviteUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_InviteUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_InviteUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_InviteUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_InviteUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2S_InviteUserRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_InviteUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_InviteUserRequest";
  }
  protected:
  explicit C2S_InviteUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_InviteUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_InviteUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_InviteUserResponse) */ {
 public:
  inline S2C_InviteUserResponse() : S2C_InviteUserResponse(nullptr) {}
  ~S2C_InviteUserResponse() override;
  explicit constexpr S2C_InviteUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_InviteUserResponse(const S2C_InviteUserResponse& from);
  S2C_InviteUserResponse(S2C_InviteUserResponse&& from) noexcept
    : S2C_InviteUserResponse() {
    *this = ::std::move(from);
  }

  inline S2C_InviteUserResponse& operator=(const S2C_InviteUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_InviteUserResponse& operator=(S2C_InviteUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_InviteUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_InviteUserResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_InviteUserResponse*>(
               &_S2C_InviteUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(S2C_InviteUserResponse& a, S2C_InviteUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_InviteUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_InviteUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_InviteUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_InviteUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_InviteUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_InviteUserResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_InviteUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_InviteUserResponse";
  }
  protected:
  explicit S2C_InviteUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // .google.protobuf.BoolValue success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& success() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_success();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_success();
  void set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_success() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_success();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_InviteUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_InviteUserNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_InviteUserNotification) */ {
 public:
  inline S2C_InviteUserNotification() : S2C_InviteUserNotification(nullptr) {}
  ~S2C_InviteUserNotification() override;
  explicit constexpr S2C_InviteUserNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_InviteUserNotification(const S2C_InviteUserNotification& from);
  S2C_InviteUserNotification(S2C_InviteUserNotification&& from) noexcept
    : S2C_InviteUserNotification() {
    *this = ::std::move(from);
  }

  inline S2C_InviteUserNotification& operator=(const S2C_InviteUserNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_InviteUserNotification& operator=(S2C_InviteUserNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_InviteUserNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_InviteUserNotification* internal_default_instance() {
    return reinterpret_cast<const S2C_InviteUserNotification*>(
               &_S2C_InviteUserNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S2C_InviteUserNotification& a, S2C_InviteUserNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_InviteUserNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_InviteUserNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_InviteUserNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_InviteUserNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_InviteUserNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_InviteUserNotification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_InviteUserNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_InviteUserNotification";
  }
  protected:
  explicit S2C_InviteUserNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 1,
  };
  // string ipAddress = 1;
  void clear_ipaddress();
  const std::string& ipaddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipaddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipaddress();
  PROTOBUF_NODISCARD std::string* release_ipaddress();
  void set_allocated_ipaddress(std::string* ipaddress);
  private:
  const std::string& _internal_ipaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipaddress(const std::string& value);
  std::string* _internal_mutable_ipaddress();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_InviteUserNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C2S_StartGameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_StartGameRequest) */ {
 public:
  inline C2S_StartGameRequest() : C2S_StartGameRequest(nullptr) {}
  explicit constexpr C2S_StartGameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_StartGameRequest(const C2S_StartGameRequest& from);
  C2S_StartGameRequest(C2S_StartGameRequest&& from) noexcept
    : C2S_StartGameRequest() {
    *this = ::std::move(from);
  }

  inline C2S_StartGameRequest& operator=(const C2S_StartGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_StartGameRequest& operator=(C2S_StartGameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_StartGameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_StartGameRequest* internal_default_instance() {
    return reinterpret_cast<const C2S_StartGameRequest*>(
               &_C2S_StartGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(C2S_StartGameRequest& a, C2S_StartGameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_StartGameRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_StartGameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_StartGameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_StartGameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_StartGameRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_StartGameRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_StartGameRequest";
  }
  protected:
  explicit C2S_StartGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_StartGameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S2C_StartGameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_StartGameResponse) */ {
 public:
  inline S2C_StartGameResponse() : S2C_StartGameResponse(nullptr) {}
  ~S2C_StartGameResponse() override;
  explicit constexpr S2C_StartGameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_StartGameResponse(const S2C_StartGameResponse& from);
  S2C_StartGameResponse(S2C_StartGameResponse&& from) noexcept
    : S2C_StartGameResponse() {
    *this = ::std::move(from);
  }

  inline S2C_StartGameResponse& operator=(const S2C_StartGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_StartGameResponse& operator=(S2C_StartGameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_StartGameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_StartGameResponse* internal_default_instance() {
    return reinterpret_cast<const S2C_StartGameResponse*>(
               &_S2C_StartGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S2C_StartGameResponse& a, S2C_StartGameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_StartGameResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_StartGameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_StartGameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_StartGameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_StartGameResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S2C_StartGameResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_StartGameResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_StartGameResponse";
  }
  protected:
  explicit S2C_StartGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // .google.protobuf.BoolValue success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& success() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::BoolValue* release_success();
  ::PROTOBUF_NAMESPACE_ID::BoolValue* mutable_success();
  void set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  private:
  const ::PROTOBUF_NAMESPACE_ID::BoolValue& _internal_success() const;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_success();
  public:
  void unsafe_arena_set_allocated_success(
      ::PROTOBUF_NAMESPACE_ID::BoolValue* success);
  ::PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_success();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_StartGameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::BoolValue* success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S2C_ValidationRequest

// -------------------------------------------------------------------

// C2S_ValidationResponse

// -------------------------------------------------------------------

// S2C_SessionExpiredNotification

// -------------------------------------------------------------------

// C2S_LoginRequest

// string username = 1;
inline void C2S_LoginRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& C2S_LoginRequest::username() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_LoginRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_LoginRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_LoginRequest.username)
}
inline std::string* C2S_LoginRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_LoginRequest.username)
  return _s;
}
inline const std::string& C2S_LoginRequest::_internal_username() const {
  return username_.Get();
}
inline void C2S_LoginRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_LoginRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_LoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_LoginRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2S_LoginRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_LoginRequest.username)
}

// string password = 2;
inline void C2S_LoginRequest::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& C2S_LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_LoginRequest.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_LoginRequest::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_LoginRequest.password)
}
inline std::string* C2S_LoginRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_LoginRequest.password)
  return _s;
}
inline const std::string& C2S_LoginRequest::_internal_password() const {
  return password_.Get();
}
inline void C2S_LoginRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_LoginRequest::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_LoginRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2S_LoginRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_LoginRequest.password)
}

// -------------------------------------------------------------------

// S2C_LoginResponse

// .google.protobuf.BoolValue success = 1;
inline bool S2C_LoginResponse::_internal_has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline bool S2C_LoginResponse::has_success() const {
  return _internal_has_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_LoginResponse::_internal_success() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = success_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_LoginResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoginResponse.success)
  return _internal_success();
}
inline void S2C_LoginResponse::unsafe_arena_set_allocated_success(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_LoginResponse.success)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_LoginResponse::release_success() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_LoginResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_LoginResponse.success)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_LoginResponse::_internal_mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    success_ = p;
  }
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_LoginResponse::mutable_success() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LoginResponse.success)
  return _msg;
}
inline void S2C_LoginResponse::set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success));
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_LoginResponse.success)
}

// -------------------------------------------------------------------

// C2S_LogoutRequest

// -------------------------------------------------------------------

// S2C_LogoutResponse

// -------------------------------------------------------------------

// C2S_JoinRequest

// string username = 1;
inline void C2S_JoinRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& C2S_JoinRequest::username() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_JoinRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_JoinRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_JoinRequest.username)
}
inline std::string* C2S_JoinRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_JoinRequest.username)
  return _s;
}
inline const std::string& C2S_JoinRequest::_internal_username() const {
  return username_.Get();
}
inline void C2S_JoinRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_JoinRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_JoinRequest::release_username() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_JoinRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2S_JoinRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_JoinRequest.username)
}

// string password = 2;
inline void C2S_JoinRequest::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& C2S_JoinRequest::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_JoinRequest.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_JoinRequest::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_JoinRequest.password)
}
inline std::string* C2S_JoinRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_JoinRequest.password)
  return _s;
}
inline const std::string& C2S_JoinRequest::_internal_password() const {
  return password_.Get();
}
inline void C2S_JoinRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_JoinRequest::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_JoinRequest::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_JoinRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2S_JoinRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_JoinRequest.password)
}

// -------------------------------------------------------------------

// S2C_JoinResponse

// .google.protobuf.BoolValue success = 1;
inline bool S2C_JoinResponse::_internal_has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline bool S2C_JoinResponse::has_success() const {
  return _internal_has_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_JoinResponse::_internal_success() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = success_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_JoinResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_JoinResponse.success)
  return _internal_success();
}
inline void S2C_JoinResponse::unsafe_arena_set_allocated_success(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_JoinResponse.success)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_JoinResponse::release_success() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_JoinResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_JoinResponse.success)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_JoinResponse::_internal_mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    success_ = p;
  }
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_JoinResponse::mutable_success() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_JoinResponse.success)
  return _msg;
}
inline void S2C_JoinResponse::set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success));
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_JoinResponse.success)
}

// -------------------------------------------------------------------

// C2S_CreateRoomRequest

// -------------------------------------------------------------------

// S2C_CreateRoomResponse

// .google.protobuf.BoolValue success = 1;
inline bool S2C_CreateRoomResponse::_internal_has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline bool S2C_CreateRoomResponse::has_success() const {
  return _internal_has_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_CreateRoomResponse::_internal_success() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = success_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_CreateRoomResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_CreateRoomResponse.success)
  return _internal_success();
}
inline void S2C_CreateRoomResponse::unsafe_arena_set_allocated_success(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_CreateRoomResponse.success)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_CreateRoomResponse::release_success() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_CreateRoomResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_CreateRoomResponse.success)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_CreateRoomResponse::_internal_mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    success_ = p;
  }
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_CreateRoomResponse::mutable_success() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_CreateRoomResponse.success)
  return _msg;
}
inline void S2C_CreateRoomResponse::set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success));
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_CreateRoomResponse.success)
}

// string roomCode = 2;
inline void S2C_CreateRoomResponse::clear_roomcode() {
  roomcode_.ClearToEmpty();
}
inline const std::string& S2C_CreateRoomResponse::roomcode() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_CreateRoomResponse.roomCode)
  return _internal_roomcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_CreateRoomResponse::set_roomcode(ArgT0&& arg0, ArgT... args) {
 
 roomcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_CreateRoomResponse.roomCode)
}
inline std::string* S2C_CreateRoomResponse::mutable_roomcode() {
  std::string* _s = _internal_mutable_roomcode();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_CreateRoomResponse.roomCode)
  return _s;
}
inline const std::string& S2C_CreateRoomResponse::_internal_roomcode() const {
  return roomcode_.Get();
}
inline void S2C_CreateRoomResponse::_internal_set_roomcode(const std::string& value) {
  
  roomcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S2C_CreateRoomResponse::_internal_mutable_roomcode() {
  
  return roomcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S2C_CreateRoomResponse::release_roomcode() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_CreateRoomResponse.roomCode)
  return roomcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S2C_CreateRoomResponse::set_allocated_roomcode(std::string* roomcode) {
  if (roomcode != nullptr) {
    
  } else {
    
  }
  roomcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomcode,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomcode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    roomcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_CreateRoomResponse.roomCode)
}

// -------------------------------------------------------------------

// C2S_JoinRoomRequest

// string roomCode = 1;
inline void C2S_JoinRoomRequest::clear_roomcode() {
  roomcode_.ClearToEmpty();
}
inline const std::string& C2S_JoinRoomRequest::roomcode() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_JoinRoomRequest.roomCode)
  return _internal_roomcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_JoinRoomRequest::set_roomcode(ArgT0&& arg0, ArgT... args) {
 
 roomcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_JoinRoomRequest.roomCode)
}
inline std::string* C2S_JoinRoomRequest::mutable_roomcode() {
  std::string* _s = _internal_mutable_roomcode();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_JoinRoomRequest.roomCode)
  return _s;
}
inline const std::string& C2S_JoinRoomRequest::_internal_roomcode() const {
  return roomcode_.Get();
}
inline void C2S_JoinRoomRequest::_internal_set_roomcode(const std::string& value) {
  
  roomcode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_JoinRoomRequest::_internal_mutable_roomcode() {
  
  return roomcode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_JoinRoomRequest::release_roomcode() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_JoinRoomRequest.roomCode)
  return roomcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2S_JoinRoomRequest::set_allocated_roomcode(std::string* roomcode) {
  if (roomcode != nullptr) {
    
  } else {
    
  }
  roomcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomcode,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomcode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    roomcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_JoinRoomRequest.roomCode)
}

// -------------------------------------------------------------------

// S2C_JoinRoomResponse

// .google.protobuf.BoolValue success = 1;
inline bool S2C_JoinRoomResponse::_internal_has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline bool S2C_JoinRoomResponse::has_success() const {
  return _internal_has_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_JoinRoomResponse::_internal_success() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = success_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_JoinRoomResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_JoinRoomResponse.success)
  return _internal_success();
}
inline void S2C_JoinRoomResponse::unsafe_arena_set_allocated_success(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_JoinRoomResponse.success)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_JoinRoomResponse::release_success() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_JoinRoomResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_JoinRoomResponse.success)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_JoinRoomResponse::_internal_mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    success_ = p;
  }
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_JoinRoomResponse::mutable_success() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_JoinRoomResponse.success)
  return _msg;
}
inline void S2C_JoinRoomResponse::set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success));
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_JoinRoomResponse.success)
}

// string ipAddress = 2;
inline void S2C_JoinRoomResponse::clear_ipaddress() {
  ipaddress_.ClearToEmpty();
}
inline const std::string& S2C_JoinRoomResponse::ipaddress() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_JoinRoomResponse.ipAddress)
  return _internal_ipaddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_JoinRoomResponse::set_ipaddress(ArgT0&& arg0, ArgT... args) {
 
 ipaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_JoinRoomResponse.ipAddress)
}
inline std::string* S2C_JoinRoomResponse::mutable_ipaddress() {
  std::string* _s = _internal_mutable_ipaddress();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_JoinRoomResponse.ipAddress)
  return _s;
}
inline const std::string& S2C_JoinRoomResponse::_internal_ipaddress() const {
  return ipaddress_.Get();
}
inline void S2C_JoinRoomResponse::_internal_set_ipaddress(const std::string& value) {
  
  ipaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S2C_JoinRoomResponse::_internal_mutable_ipaddress() {
  
  return ipaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S2C_JoinRoomResponse::release_ipaddress() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_JoinRoomResponse.ipAddress)
  return ipaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S2C_JoinRoomResponse::set_allocated_ipaddress(std::string* ipaddress) {
  if (ipaddress != nullptr) {
    
  } else {
    
  }
  ipaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipaddress,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipaddress_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_JoinRoomResponse.ipAddress)
}

// -------------------------------------------------------------------

// C2S_QuitRoomRequest

// -------------------------------------------------------------------

// S2C_QuitRoomResponse

// .google.protobuf.BoolValue success = 1;
inline bool S2C_QuitRoomResponse::_internal_has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline bool S2C_QuitRoomResponse::has_success() const {
  return _internal_has_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_QuitRoomResponse::_internal_success() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = success_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_QuitRoomResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_QuitRoomResponse.success)
  return _internal_success();
}
inline void S2C_QuitRoomResponse::unsafe_arena_set_allocated_success(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_QuitRoomResponse.success)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_QuitRoomResponse::release_success() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_QuitRoomResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_QuitRoomResponse.success)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_QuitRoomResponse::_internal_mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    success_ = p;
  }
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_QuitRoomResponse::mutable_success() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_QuitRoomResponse.success)
  return _msg;
}
inline void S2C_QuitRoomResponse::set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success));
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_QuitRoomResponse.success)
}

// -------------------------------------------------------------------

// C2S_InviteUserRequest

// string username = 1;
inline void C2S_InviteUserRequest::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& C2S_InviteUserRequest::username() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_InviteUserRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_InviteUserRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_InviteUserRequest.username)
}
inline std::string* C2S_InviteUserRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_InviteUserRequest.username)
  return _s;
}
inline const std::string& C2S_InviteUserRequest::_internal_username() const {
  return username_.Get();
}
inline void C2S_InviteUserRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C2S_InviteUserRequest::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C2S_InviteUserRequest::release_username() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_InviteUserRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C2S_InviteUserRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_InviteUserRequest.username)
}

// -------------------------------------------------------------------

// S2C_InviteUserResponse

// .google.protobuf.BoolValue success = 1;
inline bool S2C_InviteUserResponse::_internal_has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline bool S2C_InviteUserResponse::has_success() const {
  return _internal_has_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_InviteUserResponse::_internal_success() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = success_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_InviteUserResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_InviteUserResponse.success)
  return _internal_success();
}
inline void S2C_InviteUserResponse::unsafe_arena_set_allocated_success(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_InviteUserResponse.success)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_InviteUserResponse::release_success() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_InviteUserResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_InviteUserResponse.success)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_InviteUserResponse::_internal_mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    success_ = p;
  }
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_InviteUserResponse::mutable_success() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_InviteUserResponse.success)
  return _msg;
}
inline void S2C_InviteUserResponse::set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success));
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_InviteUserResponse.success)
}

// -------------------------------------------------------------------

// S2C_InviteUserNotification

// string ipAddress = 1;
inline void S2C_InviteUserNotification::clear_ipaddress() {
  ipaddress_.ClearToEmpty();
}
inline const std::string& S2C_InviteUserNotification::ipaddress() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_InviteUserNotification.ipAddress)
  return _internal_ipaddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_InviteUserNotification::set_ipaddress(ArgT0&& arg0, ArgT... args) {
 
 ipaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_InviteUserNotification.ipAddress)
}
inline std::string* S2C_InviteUserNotification::mutable_ipaddress() {
  std::string* _s = _internal_mutable_ipaddress();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_InviteUserNotification.ipAddress)
  return _s;
}
inline const std::string& S2C_InviteUserNotification::_internal_ipaddress() const {
  return ipaddress_.Get();
}
inline void S2C_InviteUserNotification::_internal_set_ipaddress(const std::string& value) {
  
  ipaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S2C_InviteUserNotification::_internal_mutable_ipaddress() {
  
  return ipaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S2C_InviteUserNotification::release_ipaddress() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_InviteUserNotification.ipAddress)
  return ipaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S2C_InviteUserNotification::set_allocated_ipaddress(std::string* ipaddress) {
  if (ipaddress != nullptr) {
    
  } else {
    
  }
  ipaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipaddress,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipaddress_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_InviteUserNotification.ipAddress)
}

// -------------------------------------------------------------------

// C2S_StartGameRequest

// -------------------------------------------------------------------

// S2C_StartGameResponse

// .google.protobuf.BoolValue success = 1;
inline bool S2C_StartGameResponse::_internal_has_success() const {
  return this != internal_default_instance() && success_ != nullptr;
}
inline bool S2C_StartGameResponse::has_success() const {
  return _internal_has_success();
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_StartGameResponse::_internal_success() const {
  const ::PROTOBUF_NAMESPACE_ID::BoolValue* p = success_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::BoolValue&>(
      ::PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::BoolValue& S2C_StartGameResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_StartGameResponse.success)
  return _internal_success();
}
inline void S2C_StartGameResponse::unsafe_arena_set_allocated_success(
    ::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_StartGameResponse.success)
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_StartGameResponse::release_success() {
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_StartGameResponse::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_StartGameResponse.success)
  
  ::PROTOBUF_NAMESPACE_ID::BoolValue* temp = success_;
  success_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_StartGameResponse::_internal_mutable_success() {
  
  if (success_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::BoolValue>(GetArenaForAllocation());
    success_ = p;
  }
  return success_;
}
inline ::PROTOBUF_NAMESPACE_ID::BoolValue* S2C_StartGameResponse::mutable_success() {
  ::PROTOBUF_NAMESPACE_ID::BoolValue* _msg = _internal_mutable_success();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_StartGameResponse.success)
  return _msg;
}
inline void S2C_StartGameResponse::set_allocated_success(::PROTOBUF_NAMESPACE_ID::BoolValue* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(success_);
  }
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(success));
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    
  } else {
    
  }
  success_ = success;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_StartGameResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
